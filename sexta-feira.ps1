# üöÄ SEXTA-FEIRA ATIVAR PROJETO - Automa√ß√£o Completa
# =================================================
# Comando m√°gico que faz TUDO: GitHub + Pasta + Ambiente de desenvolvimento

param(
  [Parameter(Position = 0)]
  [string]$NomeProjeto = "",
    
  [Parameter(Position = 1, ValueFromRemainingArguments = $true)]
  [string[]]$DescricaoProjeto = @(),
    
  [switch]$Private = $false,
  [switch]$Force = $false
)

# Juntar descri√ß√£o
$descricao = $DescricaoProjeto -join " "

function Write-SextaMessage {
  param([string]$Message, [string]$Icon = "üéØ")
  Write-Host "$Icon $Message" -ForegroundColor Cyan
}

function Write-SextaSuccess {
  param([string]$Message, [string]$Icon = "‚úÖ")
  Write-Host "$Icon $Message" -ForegroundColor Green
}

function Write-SextaError {
  param([string]$Message, [string]$Icon = "‚ùå")
  Write-Host "$Icon $Message" -ForegroundColor Red
}

# Banner especial de sexta-feira
Write-Host ""
Write-Host "üéâ SEXTA-FEIRA ATIVAR PROJETO üéâ" -ForegroundColor Magenta
Write-Host "================================" -ForegroundColor Magenta
Write-Host "üöÄ Ambiente completo em 1 comando!" -ForegroundColor Green
Write-Host ""

# Se n√£o informou nome, perguntar
if (-not $NomeProjeto) {
  $NomeProjeto = Read-Host "üìù Nome do projeto"
  if (-not $NomeProjeto) {
    Write-SextaError "Nome √© obrigat√≥rio para criar o projeto!"
    exit 1
  }
}

# Se n√£o informou descri√ß√£o, perguntar
if (-not $descricao) {
  $descricao = Read-Host "üí≠ Descri√ß√£o do projeto (o que vai fazer)"
  if (-not $descricao) {
    $descricao = "Projeto criado automaticamente pela Sexta-Feira"
  }
}

Write-SextaMessage "Projeto: $NomeProjeto" "üìÅ"
Write-SextaMessage "Descri√ß√£o: $descricao" "üí≠"
Write-Host ""

# 1. CRIAR PASTA LOCAL NO C:\vscode
Write-SextaMessage "1. Criando pasta local em C:\vscode..." "üìÅ"

$pastaBase = "C:\vscode"
$pastaProjeto = "$pastaBase\$NomeProjeto"

# Criar pasta base se n√£o existir
if (-not (Test-Path $pastaBase)) {
  New-Item -ItemType Directory -Path $pastaBase -Force | Out-Null
  Write-SextaSuccess "Pasta base C:\vscode criada!"
}

# Verificar se projeto j√° existe
if (Test-Path $pastaProjeto) {
  if (-not $Force) {
    Write-Host "‚ö†Ô∏è  Projeto '$NomeProjeto' j√° existe em C:\vscode!" -ForegroundColor Yellow
    $overwrite = Read-Host "Sobrescrever? (s/N)"
    if ($overwrite -ne "s" -and $overwrite -ne "S") {
      Write-SextaError "Opera√ß√£o cancelada."
      exit 1
    }
  }
  Remove-Item $pastaProjeto -Recurse -Force
}

# Criar pasta do projeto
New-Item -ItemType Directory -Path $pastaProjeto -Force | Out-Null
Set-Location $pastaProjeto
Write-SextaSuccess "Pasta criada: $pastaProjeto"

# 2. INICIALIZAR GIT
Write-SextaMessage "2. Inicializando Git..." "üîß"
try {
  git init *>$null
  Write-SextaSuccess "Git inicializado!"
}
catch {
  Write-SextaError "Erro ao inicializar Git. Verifique se Git est√° instalado."
}

# 3. CRIAR ARQUIVOS B√ÅSICOS DO PROJETO
Write-SextaMessage "3. Criando estrutura b√°sica..." "üìã"

# README.md
$readme = @"
# $NomeProjeto

## üìù Descri√ß√£o
$descricao

## üöÄ Criado em
$(Get-Date -Format 'dd/MM/yyyy HH:mm:ss') - Sexta-Feira Ativar Projeto

## ‚ú® Status
üî• Projeto ativo e pronto para desenvolvimento!

## üõ†Ô∏è Ambiente
- ‚úÖ Agente Principal configurado
- ‚úÖ VS Code otimizado
- ‚úÖ Git inicializado
- ‚úÖ GitHub conectado

## üí° Como usar
\`\`\`bash
# Desenvolver automaticamente
quero "funcionalidade que voc√™ quer"

# Otimizar c√≥digo
ma "otimizar performance"

# Fazer deploy
ma "fazer deploy"
\`\`\`

## üéØ Pr√≥ximos passos
1. Use: \`quero "sua ideia"\`
2. O Agente Principal faz tudo!
3. Relaxe e veja a m√°gica acontecer ‚ú®

---
*Criado automaticamente pelo sistema Sexta-Feira üéâ*
"@

$readme | Set-Content "README.md"
Write-SextaSuccess "README.md criado!"

# .gitignore
$gitignore = @"
# Sexta-Feira - Gitignore Autom√°tico
# ==================================

# Node modules
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/

# VS Code
.vscode/settings.json.backup

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# Build outputs
build/
dist/
out/

# Temporary files
*.tmp
*.temp
.cache/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Agente Principal cache
.multiagent-cache/
*.agent-temp

# Sexta-feira temp
.sexta-temp/
"@

$gitignore | Set-Content ".gitignore"
Write-SextaSuccess ".gitignore criado!"

# 4. INSTALAR SISTEMA MULTIAGENTE COMPLETO + PROMPTS
Write-SextaMessage "4. Instalando Sistema Multiagente Completo..." "ü§ñ"

# Criar pasta de prompts
if (-not (Test-Path "prompts")) {
  New-Item -ItemType Directory -Path "prompts" -Force | Out-Null
}

# Baixar sistema completo
$sistemaUrl = "https://raw.githubusercontent.com/jessefreitas/vscode-multiagent/master"

# Scripts principais
$arquivos = @{
  "ma.ps1"                 = "$sistemaUrl/scripts/ma.ps1"
  "quero.ps1"              = "$sistemaUrl/quero.ps1" 
  "agente.ps1"             = "$sistemaUrl/agente.ps1"
  "generate-code-scpo.ps1" = "$sistemaUrl/scripts/generate-code-scpo.ps1"
  "generate-code.ps1"      = "$sistemaUrl/scripts/generate-code.ps1"
  "review-code.ps1"        = "$sistemaUrl/scripts/review-code.ps1"
  "execute-code.ps1"       = "$sistemaUrl/scripts/execute-code.ps1"
}

# Prompts SCPO essenciais
$prompts = @{
  "prompts/agente-principal-arroba.md"      = "$sistemaUrl/prompts/agente-principal-arroba.md"
  "prompts/backend-architecture.md"         = "$sistemaUrl/prompts/backend-architecture.md"
  "prompts/code-optimization.md"            = "$sistemaUrl/prompts/code-optimization.md"
  "prompts/documentation.md"                = "$sistemaUrl/prompts/documentation.md"
  "prompts/omniforge-orchestrator-agent.md" = "$sistemaUrl/prompts/omniforge-orchestrator-agent.md"
  "prompts/product-strategy.md"             = "$sistemaUrl/prompts/product-strategy.md"
  "prompts/testing-quality.md"              = "$sistemaUrl/prompts/testing-quality.md"
  "prompts/ui-design.md"                    = "$sistemaUrl/prompts/ui-design.md"
  "prompts/web-development.md"              = "$sistemaUrl/prompts/web-development.md"
  "prompts/README.md"                       = "$sistemaUrl/prompts/README.md"
}

# Baixar scripts principais
foreach ($arquivo in $arquivos.Keys) {
  try {
    Write-SextaMessage "Baixando $arquivo..." "‚¨áÔ∏è"
    Invoke-WebRequest -Uri $arquivos[$arquivo] -OutFile $arquivo -UseBasicParsing
    Write-SextaSuccess "$arquivo instalado!"
  }
  catch {
    Write-SextaMessage "Criando $arquivo local..." "‚öôÔ∏è"
    # Fallback - criar vers√£o simplificada
    if ($arquivo -eq "quero.ps1") {
      @"
param([Parameter(ValueFromRemainingArguments=`$true)][string[]]`$Request)
`$fullRequest = `$Request -join " "
Write-Host "ü§ñ Sexta-feira processando: `$fullRequest" -ForegroundColor Cyan
if (`$fullRequest) { & ".\agente.ps1" `$fullRequest }
"@ | Set-Content $arquivo
    }
  }
}

# Baixar prompts SCPO
Write-SextaMessage "Baixando prompts SCPO especializados..." "üìö"
$promptsOk = 0
foreach ($prompt in $prompts.Keys) {
  try {
    Write-SextaMessage "Baixando $prompt..." "üìÑ"
    Invoke-WebRequest -Uri $prompts[$prompt] -OutFile $prompt -UseBasicParsing -TimeoutSec 30
    if (Test-Path $prompt) {
      Write-SextaSuccess "Prompt $prompt instalado!"
      $promptsOk++
    }
    else {
      Write-SextaError "Arquivo $prompt n√£o foi criado"
    }
  }
  catch {
    Write-SextaError "Erro ao baixar $prompt`: $($_.Exception.Message)"
    Write-Host "   URL: $($prompts[$prompt])" -ForegroundColor Gray
  }
}
Write-SextaMessage "$promptsOk de $($prompts.Count) prompts instalados" "üìä"

# Baixar arquivos auxiliares importantes
Write-SextaMessage "Baixando configura√ß√µes e templates..." "‚öôÔ∏è"
$auxiliares = @{
  "diagnostico-sexta.ps1"       = "$sistemaUrl/diagnostico-sexta.ps1"
  "instalar-sexta-global.ps1"   = "$sistemaUrl/instalar-sexta-global.ps1"
  "auto-reparacao.ps1"          = "$sistemaUrl/auto-reparacao.ps1"
  "STATUS-FINAL-SEXTA-FEIRA.md" = "$sistemaUrl/STATUS-FINAL-SEXTA-FEIRA.md"
  "SEXTA-FEIRA-GUIA-LEIGOS.md"  = "$sistemaUrl/SEXTA-FEIRA-GUIA-LEIGOS.md"
}

foreach ($aux in $auxiliares.Keys) {
  try {
    Write-SextaMessage "Baixando $aux..." "üìÑ"
    Invoke-WebRequest -Uri $auxiliares[$aux] -OutFile $aux -UseBasicParsing -ErrorAction SilentlyContinue
    Write-SextaSuccess "$aux instalado!"
  }
  catch {
    # Ignorar erros - s√£o arquivos opcionais
  }
}

# 4.9. VERIFICA√á√ÉO E FALLBACK - GARANTIR PROJETO COMPLETO
Write-SextaMessage "Verificando integridade do projeto..." "üîç"

# Lista de arquivos essenciais que DEVEM existir
$arquivosEssenciais = @(
  "ma.ps1", "quero.ps1", "agente.ps1", "generate-code-scpo.ps1", 
  "generate-code.ps1", "review-code.ps1", "execute-code.ps1",
  "multiagent.json", ".gitignore", "README.md"
)

# Lista de prompts essenciais
$promptsEssenciais = @(
  "prompts/agente-principal-arroba.md",
  "prompts/backend-architecture.md", 
  "prompts/ui-design.md",
  "prompts/web-development.md",
  "prompts/code-optimization.md",
  "prompts/README.md"
)

# Verificar e reparar arquivos faltantes
$arquivosFaltando = @()
$promptsFaltando = @()

foreach ($arquivo in $arquivosEssenciais) {
  if (-not (Test-Path $arquivo)) {
    $arquivosFaltando += $arquivo
  }
}

foreach ($prompt in $promptsEssenciais) {
  if (-not (Test-Path $prompt)) {
    $promptsFaltando += $prompt
  }
}

# Executar repara√ß√£o se necess√°rio
if ($arquivosFaltando.Count -gt 0 -or $promptsFaltando.Count -gt 0) {
  Write-SextaMessage "‚ö†Ô∏è  Detectados $($arquivosFaltando.Count + $promptsFaltando.Count) arquivos faltando - executando repara√ß√£o..." "üîß"
  
  # Reparar scripts faltantes
  foreach ($arquivo in $arquivosFaltando) {
    try {
      $url = $arquivos[$arquivo]
      if ($url) {
        Write-SextaMessage "Reparando $arquivo..." "üîß"
        Invoke-WebRequest -Uri $url -OutFile $arquivo -UseBasicParsing -TimeoutSec 30
        Write-SextaSuccess "‚úÖ $arquivo reparado!"
      }
    }
    catch {
      Write-SextaError "‚ùå Falha ao reparar $arquivo"  
    }
  }
  
  # Reparar prompts faltantes
  foreach ($prompt in $promptsFaltando) {
    try {
      $url = $prompts[$prompt]
      if ($url) {
        Write-SextaMessage "Reparando $prompt..." "üîß"
        # Garantir que pasta prompts existe
        if (-not (Test-Path "prompts")) {
          New-Item -ItemType Directory -Path "prompts" -Force | Out-Null
        }
        Invoke-WebRequest -Uri $url -OutFile $prompt -UseBasicParsing -TimeoutSec 30
        Write-SextaSuccess "‚úÖ $prompt reparado!"
      }
    }
    catch {
      Write-SextaError "‚ùå Falha ao reparar $prompt"
    }
  }
  
}
else {
  Write-SextaSuccess "‚úÖ Todos os arquivos essenciais est√£o presentes!"
}

# Relat√≥rio final de integridade
$totalArquivos = (Get-ChildItem -Recurse -File | Measure-Object).Count
$totalPrompts = if (Test-Path "prompts") { (Get-ChildItem "prompts" -Filter "*.md" | Measure-Object).Count } else { 0 }

Write-Host ""
Write-SextaSuccess "üìä RELAT√ìRIO DE INTEGRIDADE DO PROJETO:"
Write-Host "   üìÅ Total de arquivos: $totalArquivos" -ForegroundColor Green
Write-Host "   üìö Prompts SCPO: $totalPrompts" -ForegroundColor Green
Write-Host "   ü§ñ Scripts de agente: $(($arquivosEssenciais | Where-Object { Test-Path $_ }).Count)/$($arquivosEssenciais.Count)" -ForegroundColor Green
Write-Host "   üîß Sistema: $(if ($totalArquivos -ge 20 -and $totalPrompts -ge 5) { "‚úÖ COMPLETO" } else { "‚ö†Ô∏è  INCOMPLETO" })" -ForegroundColor $(if ($totalArquivos -ge 20 -and $totalPrompts -ge 5) { "Green" } else { "Yellow" })
Write-Host ""

# 4.5. INICIALIZAR PROJETO MULTIAGENT
Write-SextaMessage "Inicializando projeto MultiAgent..." "üîß"
try {
  # Criar multiagent.json b√°sico
  $multiagentConfig = @{
    project     = @{
      name        = $NomeProjeto  
      description = $descricao
      type        = "auto-detect"
      domain      = "auto-detect"
    }
    agents      = @{
      "agente-principal" = @{
        enabled          = $true
        auto_mode        = $true
        scpo_integration = $true
      }
    }
    sexta_feira = @{
      enabled    = $true
      created    = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
      auto_setup = $true
    }
  } | ConvertTo-Json -Depth 10
    
  $multiagentConfig | Set-Content "multiagent.json"
  Write-SextaSuccess "Projeto MultiAgent inicializado!"
  
  # Criar arquivo de documenta√ß√£o do projeto independente
  $projetoDoc = @"
# üéâ $NomeProjeto - Projeto Sexta-Feira Completo

> **Projeto criado em $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss') com Sistema Sexta-Feira**

## üìã Descri√ß√£o
$descricao

## üöÄ Sistema Completo Inclu√≠do

Este projeto foi criado com **TUDO necess√°rio** para funcionar independentemente:

### ü§ñ **Agentes Inteligentes:**
- `ma.ps1` - Agente principal completo
- `quero.ps1` - Comando simplificado para leigos
- `agente.ps1` - Vers√£o b√°sica integrada
- `generate-code-scpo.ps1` - Gerador de c√≥digo SCPO
- `review-code.ps1` - Revisor autom√°tico
- `execute-code.ps1` - Executor seguro

### üìö **Prompts SCPO Especializados:**
- `prompts/agente-principal-arroba.md` - Agente principal @
- `prompts/backend-architecture.md` - Arquitetura backend
- `prompts/frontend-design.md` - Design de interface
- `prompts/code-optimization.md` - Otimiza√ß√£o de c√≥digo
- `prompts/testing-quality.md` - Testes e qualidade
- **+ 6 prompts especializados adicionais**

### ‚öôÔ∏è **Configura√ß√µes VS Code:**
- `.vscode/tasks.json` - Tasks especiais Sexta-Feira
- `.vscode/settings.json` - Configura√ß√µes otimizadas
- `multiagent.json` - Configura√ß√£o do sistema

## üí° **Como usar:**

### üéØ **Para Leigos (F√°cil):**
```powershell
.\quero.ps1 "criar uma p√°gina de login"
.\quero.ps1 "fazer conex√£o com banco de dados"  
.\quero.ps1 "otimizar meu c√≥digo"
```

### üîß **Para Desenvolvedores (Completo):**
```powershell
.\ma.ps1 "criar API REST completa"
.\ma.ps1 "implementar autentica√ß√£o JWT"
.\ma.ps1 "fazer deploy na nuvem"
```

### üéÆ **No VS Code:**
- **F5** = Agente Principal
- **Ctrl+Shift+P** ‚Üí "Sexta-Feira: Desenvolver"
- **Ctrl+F5** = Novo projeto

## üîÑ **Projeto Independente:**

‚úÖ **Funciona offline** - todos os arquivos inclu√≠dos
‚úÖ **Clone do Git funcionar√°** - sistema completo
‚úÖ **Sem depend√™ncias externas** - tudo autocontido
‚úÖ **Prompts especializados** - qualidade profissional
‚úÖ **Documenta√ß√£o completa** - para todos os n√≠veis

## üéä **Criado com Sexta-Feira Ativar Projeto**

Este projeto foi gerado automaticamente pelo sistema revolucion√°rio **Sexta-Feira**, que cria projetos profissionais completos em 30 segundos!

**Seu projeto est√° pronto para codar! üöÄ**

---
*Gerado automaticamente em $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')*
"@
  
  $projetoDoc | Set-Content "PROJETO-COMPLETO.md"
  Write-SextaSuccess "Documenta√ß√£o do projeto criada!"
}
catch {
  Write-Host "‚ö†Ô∏è  Inicializa√ß√£o b√°sica aplicada" -ForegroundColor Yellow
}

# 5. CONFIGURAR VS CODE
Write-SextaMessage "5. Configurando VS Code especial para Sexta-feira..." "‚öö"

# Criar .vscode
if (-not (Test-Path ".vscode")) {
  New-Item -ItemType Directory -Path ".vscode" -Force | Out-Null
}

# URL dos templates especiais
$templateBase = "https://raw.githubusercontent.com/jessefreitas/vscode-multiagent/master/templates"

# Baixar e aplicar templates otimizados
try {
  Write-SextaMessage "Baixando configura√ß√µes otimizadas..." "‚¨áÔ∏è"
    
  # tasks.json com comandos especiais de sexta-feira
  $tasksContent = Invoke-RestMethod "$templateBase/vscode-sexta-tasks.json" -ErrorAction SilentlyContinue
  if ($tasksContent) {
    $tasksContent | ConvertTo-Json -Depth 10 | Set-Content ".vscode\tasks.json"
    Write-SextaSuccess "Tasks especiais configuradas!"
  }
    
  # settings.json otimizado
  $settingsContent = Invoke-RestMethod "$templateBase/vscode-sexta-settings.json" -ErrorAction SilentlyContinue
  if ($settingsContent) {
    # Personalizar settings com info do projeto
    $settingsObj = $settingsContent | ConvertFrom-Json
    $settingsObj | Add-Member -Type NoteProperty -Name "multiagent.sextaFeira" -Value $true -Force
    $settingsObj | Add-Member -Type NoteProperty -Name "multiagent.projectName" -Value $NomeProjeto -Force
    $settingsObj | Add-Member -Type NoteProperty -Name "multiagent.description" -Value $descricao -Force
        
    $settingsObj | ConvertTo-Json -Depth 10 | Set-Content ".vscode\settings.json"
    Write-SextaSuccess "Settings personalizados aplicados!"
  }
    
  # keybindings.json para atalhos especiais
  $keybindingsContent = Invoke-RestMethod "$templateBase/vscode-sexta-keybindings.json" -ErrorAction SilentlyContinue
  if ($keybindingsContent) {
    $keybindingsContent | ConvertTo-Json -Depth 10 | Set-Content ".vscode\keybindings.json"
    Write-SextaSuccess "Atalhos de teclado configurados!"
    Write-Host "   F5 = Agente Principal | Ctrl+F5 = Novo Projeto | Shift+F5 = Status" -ForegroundColor Gray
  }
    
}
catch {
  Write-Host "‚ö†Ô∏è  Usando configura√ß√£o offline" -ForegroundColor Yellow
    
  # Fallback: configura√ß√£o b√°sica local
  $basicTasks = @{
    version = "2.0.0"
    tasks   = @(
      @{
        label        = "üéâ Sexta-Feira Desenvolver"
        type         = "shell"
        command      = "pwsh"
        args         = @("-Command", "& { `$task = Read-Host 'üí≠ O que criar hoje'; .\quero.ps1 `"`$task`" }")
        group        = @{ kind = "build"; isDefault = $true }
        presentation = @{ echo = $true; reveal = "always"; focus = $true }
      }
    )
  } | ConvertTo-Json -Depth 10
    
  $basicTasks | Set-Content ".vscode\tasks.json"
  Write-SextaSuccess "Configura√ß√£o b√°sica aplicada!"
}

# 6. PRIMEIRO COMMIT
Write-SextaMessage "6. Fazendo primeiro commit..." "üìù"
try {
  git add . *>$null
  git commit -m "üéâ Sexta-Feira Ativar Projeto: $NomeProjeto inicializado automaticamente" *>$null
  Write-SextaSuccess "Primeiro commit realizado!"
}
catch {
  Write-SextaMessage "Commit ser√° feito ap√≥s configurar GitHub" "‚è≥"
}

# 7. CRIAR REPOSIT√ìRIO NO GITHUB
Write-SextaMessage "7. Criando reposit√≥rio no GitHub..." "üêô"

# Verificar se GitHub CLI est√° instalado
try {
  $ghVersion = & gh --version 2>$null
  if ($ghVersion) {
    Write-SextaMessage "GitHub CLI encontrado, criando reposit√≥rio..." "‚úÖ"
        
    $visibility = if ($Private) { "private" } else { "public" }
        
    try {
      & gh repo create $NomeProjeto --description "$descricao" --$visibility --source=. --remote=origin --push 2>$null
      Write-SextaSuccess "Reposit√≥rio '$NomeProjeto' criado no GitHub!"
      Write-SextaSuccess "C√≥digo enviado para: https://github.com/$(& gh api user | ConvertFrom-Json | Select-Object -ExpandProperty login)/$NomeProjeto"
    }
    catch {
      Write-SextaMessage "Reposit√≥rio ser√° criado manualmente: gh repo create $NomeProjeto --public" "üí°"
    }
  }
  else {
    Write-SextaMessage "GitHub CLI n√£o encontrado." "‚ö†Ô∏è"
    Write-Host "üí° Para criar reposit√≥rio automaticamente:" -ForegroundColor Yellow
    Write-Host "   1. Instale GitHub CLI: winget install GitHub.cli" -ForegroundColor Gray
    Write-Host "   2. Fa√ßa login: gh auth login" -ForegroundColor Gray
    Write-Host "   3. Execute novamente este comando" -ForegroundColor Gray
  }
}
catch {
  Write-SextaMessage "Configura√ß√£o manual do GitHub necess√°ria" "üí°"
}

# 8. ABRIR NO VS CODE
Write-SextaMessage "8. Abrindo projeto no VS Code..." "üé®"
try {
  code . *>$null
  Write-SextaSuccess "VS Code aberto!"
}
catch {
  Write-SextaMessage "Abra manualmente: code ." "üí°"
}

# RESULTADO FINAL
Write-Host ""
Write-Host "üéâ SEXTA-FEIRA ATIVAR PROJETO CONCLU√çDO!" -ForegroundColor Magenta
Write-Host "=========================================" -ForegroundColor Magenta
Write-Host ""
Write-Host "‚úÖ TUDO CRIADO E CONFIGURADO:" -ForegroundColor Green
Write-Host "   üìÅ Pasta: $pastaProjeto" -ForegroundColor Gray
Write-Host "   üêô GitHub: Configurado (se CLI dispon√≠vel)" -ForegroundColor Gray
Write-Host "   ü§ñ Agente Principal: Ativo" -ForegroundColor Gray
Write-Host "   üé® VS Code: Configurado e aberto" -ForegroundColor Gray
Write-Host "   üìù Git: Inicializado com primeiro commit" -ForegroundColor Gray
Write-Host ""
Write-Host "üöÄ PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host "   1. No VS Code: Ctrl+Shift+P ‚Üí 'Sexta-Feira: Desenvolver'" -ForegroundColor White
Write-Host "   2. Ou digite: quero 'funcionalidade que voc√™ quer'" -ForegroundColor White
Write-Host "   3. Relaxe enquanto o agente trabalha! üòé" -ForegroundColor White
Write-Host ""
Write-Host "üí° COMANDOS DISPON√çVEIS:" -ForegroundColor Yellow
Write-Host "   quero 'criar um site'      - Desenvolvimento autom√°tico" -ForegroundColor Gray
Write-Host "   ma 'otimizar c√≥digo'       - Otimiza√ß√£o autom√°tica" -ForegroundColor Gray
Write-Host "   ma 'fazer deploy'          - Deploy autom√°tico" -ForegroundColor Gray
Write-Host "   .\auto-reparacao.ps1       - Verificar/reparar projeto" -ForegroundColor Gray
Write-Host ""
Write-Host "üéØ Local do projeto: $pastaProjeto" -ForegroundColor Cyan
Write-Host ""
Write-Host "üéâ BOA SEXTA-FEIRA E BOM DESENVOLVIMENTO! üöÄ" -ForegroundColor Magenta