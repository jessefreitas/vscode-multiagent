# üß† VERIFICADOR MCP MEMORY SERVER
# ===============================
# Verifica e configura MCP Memory Server para projetos Sexta-Feira

param(
    [string]$ProjectPath = ".",
    [switch]$Configure = $false,
    [switch]$Force = $false
)

function Write-MCPMessage {
    param([string]$Message, [string]$Icon = "üß†")
    Write-Host "$Icon $Message" -ForegroundColor Cyan
}

function Write-MCPSuccess {
    param([string]$Message, [string]$Icon = "‚úÖ")
    Write-Host "$Icon $Message" -ForegroundColor Green
}

function Write-MCPError {
    param([string]$Message, [string]$Icon = "‚ùå")
    Write-Host "$Icon $Message" -ForegroundColor Red
}

function Write-MCPWarning {
    param([string]$Message, [string]$Icon = "‚ö†Ô∏è")
    Write-Host "$Icon $Message" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üß† VERIFICADOR MCP MEMORY SERVER" -ForegroundColor Magenta
Write-Host "=================================" -ForegroundColor Magenta
Write-Host ""

# Navegar para pasta do projeto
if ($ProjectPath -ne ".") {
    if (Test-Path $ProjectPath) {
        Set-Location $ProjectPath
        Write-MCPMessage "Verificando projeto: $ProjectPath"
    } else {
        Write-MCPError "Pasta n√£o encontrada: $ProjectPath"
        exit 1
    }
}

# Verificar se √© um projeto Sexta-Feira
if (-not (Test-Path "multiagent.json")) {
    Write-MCPError "Este n√£o parece ser um projeto Sexta-Feira (multiagent.json n√£o encontrado)"
    exit 1
}

Write-MCPSuccess "Projeto Sexta-Feira detectado!"

# 1. VERIFICAR CONFIGURA√á√ïES GLOBAIS DO VS CODE
Write-MCPMessage "Verificando configura√ß√µes globais do VS Code..." "üîç"

$vsCodeSettingsPath = "$env:APPDATA\Code\User\settings.json"
$mcpConfigured = $false

if (Test-Path $vsCodeSettingsPath) {
    $settings = Get-Content $vsCodeSettingsPath -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
    
    if ($settings -and $settings."chat.mcp.autostart") {
        Write-MCPSuccess "MCP autostart configurado: $($settings."chat.mcp.autostart")"
        $mcpConfigured = $true
    } else {
        Write-MCPWarning "MCP autostart n√£o encontrado nas configura√ß√µes globais"
    }
} else {
    Write-MCPWarning "Arquivo de configura√ß√µes do VS Code n√£o encontrado"
}

# 2. VERIFICAR CONFIGURA√á√ïES DO WORKSPACE
Write-MCPMessage "Verificando configura√ß√µes do workspace..." "üîç"

$workspaceSettings = ".vscode\settings.json"
$mcpInWorkspace = $false

if (Test-Path $workspaceSettings) {
    try {
        $wsSettings = Get-Content $workspaceSettings -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
        
        if ($wsSettings) {
            # Verificar se h√° configura√ß√µes MCP espec√≠ficas
            $mcpKeys = $wsSettings.PSObject.Properties.Name | Where-Object { $_ -match "mcp|memory" }
            
            if ($mcpKeys.Count -gt 0) {
                Write-MCPSuccess "Configura√ß√µes MCP encontradas no workspace:"
                foreach ($key in $mcpKeys) {
                    Write-Host "   $key : $($wsSettings.$key)" -ForegroundColor Green
                }
                $mcpInWorkspace = $true
            } else {
                Write-MCPWarning "Nenhuma configura√ß√£o MCP espec√≠fica no workspace"
            }
        }
    } catch {
        Write-MCPWarning "Erro ao ler configura√ß√µes do workspace"
    }
} else {
    Write-MCPWarning "Arquivo .vscode\settings.json n√£o encontrado"
}

# 3. VERIFICAR SE MCP MEMORY SERVER EST√Å DISPON√çVEL
Write-MCPMessage "Verificando disponibilidade do MCP Memory Server..." "üîç"

# Verificar se npx est√° dispon√≠vel (necess√°rio para memory server)
try {
    $npxVersion = npx --version 2>$null
    if ($npxVersion) {
        Write-MCPSuccess "NPX dispon√≠vel: v$npxVersion"
        
        # Tentar verificar se o memory server pode ser executado
        Write-MCPMessage "Testando MCP Memory Server..." "üß™"
        
        # Criar um teste r√°pido
        $testResult = Start-Job -ScriptBlock {
            try {
                $process = Start-Process -FilePath "npx" -ArgumentList "@modelcontextprotocol/server-memory" -WindowStyle Hidden -PassThru
                Start-Sleep -Milliseconds 500
                if (-not $process.HasExited) {
                    $process.Kill()
                    return "DISPON√çVEL"
                }
                return "ERRO"
            } catch {
                return "ERRO: $($_.Exception.Message)"
            }
        } | Wait-Job -Timeout 5 | Receive-Job
        
        if ($testResult -eq "DISPON√çVEL") {
            Write-MCPSuccess "MCP Memory Server est√° dispon√≠vel!"
        } else {
            Write-MCPWarning "MCP Memory Server n√£o responde: $testResult"
        }
        
    } else {
        Write-MCPError "NPX n√£o est√° dispon√≠vel (necess√°rio para MCP Memory Server)"
    }
} catch {
    Write-MCPError "Erro ao verificar NPX: $($_.Exception.Message)"
}

# 4. CONFIGURAR MCP MEMORY SE SOLICITADO
if ($Configure -or $Force) {
    Write-MCPMessage "Configurando MCP Memory Server para o projeto..." "‚öôÔ∏è"
    
    # Criar/atualizar configura√ß√µes do workspace
    if (-not (Test-Path ".vscode")) {
        New-Item -ItemType Directory -Path ".vscode" -Force | Out-Null
        Write-MCPSuccess "Pasta .vscode criada!"
    }
    
    # Configura√ß√µes MCP para o workspace
    $mcpWorkspaceConfig = @{
        "chat.mcp.autostart" = "newAndOutdated"
        "chat.mcp.servers" = @{
            "memory" = @{
                "command" = "npx"
                "args" = @("@modelcontextprotocol/server-memory")
                "env" = @{
                    "MEMORY_STORAGE_PATH" = "./mcp-memory.db"
                }
            }
        }
    }
    
    # Ler configura√ß√µes existentes ou criar novas
    if (Test-Path $workspaceSettings) {
        try {
            $existingSettings = Get-Content $workspaceSettings -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
            if (-not $existingSettings) { $existingSettings = @{} }
        } catch {
            $existingSettings = @{}
        }
    } else {
        $existingSettings = @{}
    }
    
    # Mergear configura√ß√µes
    foreach ($key in $mcpWorkspaceConfig.Keys) {
        $existingSettings | Add-Member -MemberType NoteProperty -Name $key -Value $mcpWorkspaceConfig[$key] -Force
    }
    
    # Salvar configura√ß√µes
    try {
        $existingSettings | ConvertTo-Json -Depth 10 | Set-Content $workspaceSettings -Encoding UTF8
        Write-MCPSuccess "Configura√ß√µes MCP Memory Server adicionadas ao workspace!"
        
        # Criar arquivo de inicializa√ß√£o MCP
        $mcpInitScript = @"
# üß† MCP Memory Server - Auto Inicializa√ß√£o
# ========================================
# Este arquivo garante que o MCP Memory Server inicie com o projeto

Write-Host "üß† Iniciando MCP Memory Server..." -ForegroundColor Cyan

try {
    # Verificar se NPX est√° dispon√≠vel
    `$npxVersion = npx --version 2>`$null
    if (-not `$npxVersion) {
        Write-Host "‚ùå NPX n√£o encontrado. Instale Node.js para usar MCP Memory Server" -ForegroundColor Red
        exit 1
    }
    
    # Iniciar MCP Memory Server em background
    Write-Host "üöÄ Iniciando MCP Memory Server..." -ForegroundColor Green
    
    # Definir caminho do banco de dados
    `$memoryDbPath = "./mcp-memory.db"
    `$env:MEMORY_STORAGE_PATH = `$memoryDbPath
    
    # Iniciar o servidor (ser√° gerenciado pelo VS Code)
    Write-Host "‚úÖ MCP Memory Server configurado!" -ForegroundColor Green
    Write-Host "üìÅ Database: `$memoryDbPath" -ForegroundColor Gray
    Write-Host "üí° O servidor ser√° iniciado automaticamente pelo VS Code" -ForegroundColor Yellow
    
} catch {
    Write-Host "‚ùå Erro ao configurar MCP Memory Server: `$(`$_.Exception.Message)" -ForegroundColor Red
}
"@
        
        $mcpInitScript | Set-Content "mcp-init.ps1" -Encoding UTF8
        Write-MCPSuccess "Script de inicializa√ß√£o MCP criado: mcp-init.ps1"
        
        # Adicionar ao .gitignore
        $gitignoreContent = ""
        if (Test-Path ".gitignore") {
            $gitignoreContent = Get-Content ".gitignore" -Raw
        }
        
        if ($gitignoreContent -notmatch "mcp-memory\.db") {
            $gitignoreContent += "`n# MCP Memory Database`nmcp-memory.db`n"
            $gitignoreContent | Set-Content ".gitignore" -Encoding UTF8
            Write-MCPSuccess "mcp-memory.db adicionado ao .gitignore"
        }
        
    } catch {
        Write-MCPError "Erro ao salvar configura√ß√µes: $($_.Exception.Message)"
    }
}

# 5. RELAT√ìRIO FINAL
Write-Host ""
Write-MCPSuccess "üß† VERIFICA√á√ÉO MCP MEMORY CONCLU√çDA!"
Write-Host "====================================" -ForegroundColor Green
Write-Host ""

Write-Host "üìä RESUMO:" -ForegroundColor Cyan
Write-Host "   üîß MCP Global: $(if ($mcpConfigured) { "‚úÖ Configurado" } else { "‚ùå N√£o configurado" })" -ForegroundColor $(if ($mcpConfigured) { "Green" } else { "Red" })
Write-Host "   üéØ MCP Workspace: $(if ($mcpInWorkspace -or $Configure) { "‚úÖ Configurado" } else { "‚ùå N√£o configurado" })" -ForegroundColor $(if ($mcpInWorkspace -or $Configure) { "Green" } else { "Red" })
Write-Host "   üì¶ NPX Dispon√≠vel: $(if ($npxVersion) { "‚úÖ v$npxVersion" } else { "‚ùå N√£o encontrado" })" -ForegroundColor $(if ($npxVersion) { "Green" } else { "Red" })

Write-Host ""
if ($Configure) {
    Write-MCPSuccess "üéâ MCP Memory Server configurado para este projeto!"
    Write-Host ""
    Write-Host "üí° PR√ìXIMOS PASSOS:" -ForegroundColor Yellow
    Write-Host "   1. Reinicie o VS Code para ativar as configura√ß√µes" -ForegroundColor White
    Write-Host "   2. O MCP Memory Server iniciar√° automaticamente" -ForegroundColor White
    Write-Host "   3. Use comandos de mem√≥ria no GitHub Copilot Chat" -ForegroundColor White
} else {
    Write-Host "üí° PARA CONFIGURAR MCP MEMORY:" -ForegroundColor Yellow
    Write-Host "   .\verificar-mcp.ps1 -Configure" -ForegroundColor White
}

Write-Host ""