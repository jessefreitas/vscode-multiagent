{
  "SCPO React Component": {
    "prefix": "scpo-react-component",
    "body": [
      "import React, { ${1|useState,useEffect,useCallback|} } from 'react';",
      "",
      "/**",
      " * ${2:ComponentName} - Generated with SCPO",
      " * Task: ${3:Criar componente reutilizável}",
      " * Constraints: TypeScript strict, TailwindCSS, Accessibility",
      " */",
      "",
      "interface ${2:ComponentName}Props {",
      "  ${4:data}: ${5:DataType}${6|,|};",
      "  ${7:onAction}?: (${8:id}: string) => void;",
      "  ${9:className}?: string;",
      "}",
      "",
      "export const ${2:ComponentName}: React.FC<${2:ComponentName}Props> = ({",
      "  ${4:data},",
      "  ${7:onAction},",
      "  ${9:className} = ''",
      "}) => {",
      "  const [${10:isLoading}, set${10/(.*)/${1:/capitalize}/}] = useState(false);",
      "",
      "  const handle${7/(.*)/${1:/capitalize}/} = useCallback((${8:id}: string) => {",
      "    set${10/(.*)/${1:/capitalize}/}(true);",
      "    ${7:onAction}?.(${8:id});",
      "    set${10/(.*)/${1:/capitalize}/}(false);",
      "  }, [${7:onAction}]);",
      "",
      "  return (",
      "    <div ",
      "      className={`${11:p-4 bg-white rounded-lg shadow-sm} \\${className}`}",
      "      role=\"${12|article,section,button|}\"",
      "      aria-label=\"${13:Component description}\"",
      "    >",
      "      {${10:isLoading} ? (",
      "        <div className=\"${14:animate-pulse}\">",
      "          <div className=\"${15:h-4 bg-gray-200 rounded}\"></div>",
      "        </div>",
      "      ) : (",
      "        <>",
      "          <h3 className=\"${16:text-lg font-semibold mb-2}\">",
      "            {${17:data.title}}",
      "          </h3>",
      "          <p className=\"${18:text-gray-600 mb-4}\">",
      "            {${19:data.description}}",
      "          </p>",
      "          <button",
      "            onClick={() => handle${7/(.*)/${1:/capitalize}/}(${20:data.id})}",
      "            className=\"${21:px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors}\"",
      "            disabled={${10:isLoading}}",
      "            aria-label={`${22:Action for} \\${${17:data.title}}`}",
      "          >",
      "            ${23:Action}",
      "          </button>",
      "        </>",
      "      )}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${2:ComponentName};"
    ],
    "description": "Componente React com TypeScript e acessibilidade"
  },

  "SCPO React Hook": {
    "prefix": "scpo-react-hook",
    "body": [
      "import { useState, useEffect, useCallback } from 'react';",
      "import { ${1:ApiService} } from '../services/${1:ApiService}';",
      "",
      "/**",
      " * use${2:ResourceName} - Generated with SCPO",
      " * Task: ${3:Hook para gerenciar estado da API}",
      " * Constraints: Error handling, Loading states, Type safety",
      " */",
      "",
      "interface Use${2:ResourceName}Options {",
      "  ${4:autoFetch}?: boolean;",
      "  ${5:page}?: number;",
      "  ${6:perPage}?: number;",
      "}",
      "",
      "interface Use${2:ResourceName}Return {",
      "  ${7:data}: ${8:DataType}[] | null;",
      "  ${9:loading}: boolean;",
      "  ${10:error}: string | null;",
      "  ${11:refetch}: () => Promise<void>;",
      "  ${12:create}: (${13:item}: Partial<${8:DataType}>) => Promise<void>;",
      "  ${14:update}: (${15:id}: string, ${13:item}: Partial<${8:DataType}>) => Promise<void>;",
      "  ${16:remove}: (${15:id}: string) => Promise<void>;",
      "}",
      "",
      "export const use${2:ResourceName} = ({",
      "  ${4:autoFetch} = true,",
      "  ${5:page} = 1,",
      "  ${6:perPage} = 20",
      "}: Use${2:ResourceName}Options = {}): Use${2:ResourceName}Return => {",
      "  const [${7:data}, set${7/(.*)/${1:/capitalize}/}] = useState<${8:DataType}[] | null>(null);",
      "  const [${9:loading}, set${9/(.*)/${1:/capitalize}/}] = useState(false);",
      "  const [${10:error}, set${10/(.*)/${1:/capitalize}/}] = useState<string | null>(null);",
      "",
      "  const ${11:refetch} = useCallback(async () => {",
      "    try {",
      "      set${9/(.*)/${1:/capitalize}/}(true);",
      "      set${10/(.*)/${1:/capitalize}/}(null);",
      "      ",
      "      const result = await ${1:ApiService}.getAll({ ${5:page}, ${6:perPage} });",
      "      set${7/(.*)/${1:/capitalize}/}(result.data);",
      "      ",
      "    } catch (err) {",
      "      set${10/(.*)/${1:/capitalize}/}(err instanceof Error ? err.message : 'Unknown error');",
      "    } finally {",
      "      set${9/(.*)/${1:/capitalize}/}(false);",
      "    }",
      "  }, [${5:page}, ${6:perPage}]);",
      "",
      "  const ${12:create} = useCallback(async (${13:item}: Partial<${8:DataType}>) => {",
      "    try {",
      "      set${9/(.*)/${1:/capitalize}/}(true);",
      "      const newItem = await ${1:ApiService}.create(${13:item});",
      "      set${7/(.*)/${1:/capitalize)/}(prev => prev ? [...prev, newItem] : [newItem]);",
      "    } catch (err) {",
      "      set${10/(.*)/${1:/capitalize}/}(err instanceof Error ? err.message : 'Create failed');",
      "      throw err;",
      "    } finally {",
      "      set${9/(.*)/${1:/capitalize}/}(false);",
      "    }",
      "  }, []);",
      "",
      "  const ${14:update} = useCallback(async (${15:id}: string, ${13:item}: Partial<${8:DataType}>) => {",
      "    ${17:// Implementar update}",
      "    ${0}",
      "  }, []);",
      "",
      "  const ${16:remove} = useCallback(async (${15:id}: string) => {",
      "    ${18:// Implementar remove}",
      "  }, []);",
      "",
      "  useEffect(() => {",
      "    if (${4:autoFetch}) {",
      "      ${11:refetch}();",
      "    }",
      "  }, [${4:autoFetch}, ${11:refetch}]);",
      "",
      "  return {",
      "    ${7:data},",
      "    ${9:loading},", 
      "    ${10:error},",
      "    ${11:refetch},",
      "    ${12:create},",
      "    ${14:update},",
      "    ${16:remove}",
      "  };",
      "};"
    ],
    "description": "Hook React customizado com CRUD operations"
  },

  "SCPO React Form": {
    "prefix": "scpo-react-form",
    "body": [
      "import React from 'react';",
      "import { useForm, SubmitHandler } from 'react-hook-form';",
      "import { yupResolver } from '@hookform/resolvers/yup';",
      "import * as yup from 'yup';",
      "",
      "/**",
      " * ${1:FormName} - Generated with SCPO",
      " * Task: ${2:Formulário com validação robusta}",
      " * Constraints: React Hook Form, Yup validation, Accessibility",
      " */",
      "",
      "interface ${1:FormName}Data {",
      "  ${3:title}: string;",
      "  ${4:description}: string;",
      "  ${5:category}: string;",
      "}",
      "",
      "interface ${1:FormName}Props {",
      "  ${6:onSubmit}: (data: ${1:FormName}Data) => Promise<void>;",
      "  ${7:initialData}?: Partial<${1:FormName}Data>;",
      "  ${8:isLoading}?: boolean;",
      "}",
      "",
      "const ${9:validationSchema} = yup.object({",
      "  ${3:title}: yup.string()",
      "    .required('${3/(.*)/${1:/capitalize}/} é obrigatório')",
      "    .min(${10:3}, '${3/(.*)/${1:/capitalize}/} deve ter pelo menos ${10:3} caracteres')",
      "    .max(${11:100}, '${3/(.*)/${1:/capitalize}/} deve ter no máximo ${11:100} caracteres'),",
      "  ${4:description}: yup.string()",
      "    .required('${4/(.*)/${1:/capitalize}/} é obrigatória')",
      "    .min(${12:10}, '${4/(.*)/${1:/capitalize}/} deve ter pelo menos ${12:10} caracteres'),",
      "  ${5:category}: yup.string().required('${5/(.*)/${1:/capitalize}/} é obrigatória')",
      "});",
      "",
      "export const ${1:FormName}: React.FC<${1:FormName}Props> = ({",
      "  ${6:onSubmit},",
      "  ${7:initialData},",
      "  ${8:isLoading} = false",
      "}) => {",
      "  const {",
      "    register,",
      "    handleSubmit,",
      "    formState: { errors, isSubmitting },",
      "    reset",
      "  } = useForm<${1:FormName}Data>({",
      "    resolver: yupResolver(${9:validationSchema}),",
      "    defaultValues: ${7:initialData}",
      "  });",
      "",
      "  const onSubmitHandler: SubmitHandler<${1:FormName}Data> = async (data) => {",
      "    try {",
      "      await ${6:onSubmit}(data);",
      "      reset();",
      "    } catch (error) {",
      "      console.error('Form submission error:', error);",
      "    }",
      "  };",
      "",
      "  return (",
      "    <form ",
      "      onSubmit={handleSubmit(onSubmitHandler)}",
      "      className=\"${13:space-y-6 max-w-md mx-auto}\"",
      "      noValidate",
      "    >",
      "      <div>",
      "        <label ",
      "          htmlFor=\"${3:title}\"",
      "          className=\"${14:block text-sm font-medium text-gray-700 mb-2}\"",
      "        >",
      "          ${3/(.*)/${1:/capitalize}/}",
      "        </label>",
      "        <input",
      "          {...register('${3:title}')}",
      "          type=\"text\"",
      "          id=\"${3:title}\"",
      "          className={`${15:w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500} \\${",
      "            errors.${3:title} ? '${16:border-red-500}' : '${17:border-gray-300}'",
      "          }`}",
      "          aria-invalid={errors.${3:title} ? 'true' : 'false'}",
      "          aria-describedby={errors.${3:title} ? '${3:title}-error' : undefined}",
      "        />",
      "        {errors.${3:title} && (",
      "          <p ",
      "            id=\"${3:title}-error\"",
      "            className=\"${18:mt-1 text-sm text-red-600}\"",
      "            role=\"alert\"",
      "          >",
      "            {errors.${3:title}.message}",
      "          </p>",
      "        )}",
      "      </div>",
      "",
      "      <div>",
      "        <label ",
      "          htmlFor=\"${4:description}\"",
      "          className=\"${14:block text-sm font-medium text-gray-700 mb-2}\"",
      "        >",
      "          ${4/(.*)/${1:/capitalize}/}",
      "        </label>",
      "        <textarea",
      "          {...register('${4:description}')}",
      "          id=\"${4:description}\"",
      "          rows={${19:4}}",
      "          className={`${15:w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500} \\${",
      "            errors.${4:description} ? '${16:border-red-500}' : '${17:border-gray-300}'",
      "          }`}",
      "          aria-invalid={errors.${4:description} ? 'true' : 'false'}",
      "        />",
      "        {errors.${4:description} && (",
      "          <p className=\"${18:mt-1 text-sm text-red-600}\" role=\"alert\">",
      "            {errors.${4:description}.message}",
      "          </p>",
      "        )}",
      "      </div>",
      "",
      "      <button",
      "        type=\"submit\"",
      "        disabled={isSubmitting || ${8:isLoading}}",
      "        className=\"${20:w-full py-2 px-4 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors}\"",
      "      >",
      "        {isSubmitting || ${8:isLoading} ? '${21:Salvando...}' : '${22:Salvar}'}",
      "      </button>",
      "    </form>",
      "  );",
      "};",
      "",
      "export default ${1:FormName};"
    ],
    "description": "Formulário React com validação completa"
  },

  "SCPO React Test": {
    "prefix": "scpo-react-test",
    "body": [
      "import React from 'react';",
      "import { render, screen, fireEvent, waitFor } from '@testing-library/react';",
      "import userEvent from '@testing-library/user-event';",
      "import { vi } from 'vitest';",
      "import { ${1:ComponentName} } from './${1:ComponentName}';",
      "",
      "/**",
      " * ${1:ComponentName}Test - Generated with SCPO", 
      " * Task: ${2:Testar comportamento do componente}",
      " * Constraints: Testing Library, User events, Accessibility",
      " */",
      "",
      "describe('${1:ComponentName}', () => {",
      "  const ${3:mockProps} = {",
      "    ${4:data}: {",
      "      ${5:id}: '1',",
      "      ${6:title}: 'Test Title',",
      "      ${7:description}: 'Test Description'",
      "    },",
      "    ${8:onAction}: vi.fn()",
      "  };",
      "",
      "  beforeEach(() => {",
      "    vi.clearAllMocks();",
      "  });",
      "",
      "  it('renders component with correct data', () => {",
      "    render(<${1:ComponentName} {...${3:mockProps}} />);",
      "    ",
      "    expect(screen.getByText('${6:Test Title}')).toBeInTheDocument();",
      "    expect(screen.getByText('${7:Test Description}')).toBeInTheDocument();",
      "  });",
      "",
      "  it('calls onAction when button is clicked', async () => {",
      "    const user = userEvent.setup();",
      "    render(<${1:ComponentName} {...${3:mockProps}} />);",
      "    ",
      "    const ${9:actionButton} = screen.getByRole('button', { name: /action/i });",
      "    await user.click(${9:actionButton});",
      "    ",
      "    expect(${3:mockProps}.${8:onAction}).toHaveBeenCalledWith('${5:1}');",
      "  });",
      "",
      "  it('shows loading state correctly', () => {",
      "    const ${10:loadingProps} = {",
      "      ...${3:mockProps},",
      "      ${11:isLoading}: true",
      "    };",
      "    ",
      "    render(<${1:ComponentName} {...${10:loadingProps}} />);",
      "    ",
      "    expect(screen.getByText(/loading/i)).toBeInTheDocument();",
      "    expect(screen.queryByText('${6:Test Title}')).not.toBeInTheDocument();",
      "  });",
      "",
      "  it('handles error state appropriately', () => {",
      "    const ${12:errorProps} = {",
      "      ...${3:mockProps},",
      "      ${13:error}: 'Something went wrong'",
      "    };",
      "    ",
      "    render(<${1:ComponentName} {...${12:errorProps}} />);",
      "    ",
      "    expect(screen.getByText('Something went wrong')).toBeInTheDocument();",
      "  });",
      "",
      "  it('is accessible via keyboard navigation', async () => {",
      "    const user = userEvent.setup();",
      "    render(<${1:ComponentName} {...${3:mockProps}} />);",
      "    ",
      "    // Tab to button",
      "    await user.tab();",
      "    ",
      "    const ${9:actionButton} = screen.getByRole('button', { name: /action/i });",
      "    expect(${9:actionButton}).toHaveFocus();",
      "    ",
      "    // Press Enter to activate",
      "    await user.keyboard('{Enter}');",
      "    ",
      "    expect(${3:mockProps}.${8:onAction}).toHaveBeenCalledWith('${5:1}');",
      "  });",
      "",
      "  it('has proper ARIA attributes', () => {",
      "    render(<${1:ComponentName} {...${3:mockProps}} />);",
      "    ",
      "    const ${14:component} = screen.getByRole('${15|article,section,button|}');",
      "    expect(${14:component}).toHaveAttribute('aria-label');",
      "    ",
      "    const ${9:actionButton} = screen.getByRole('button');",
      "    expect(${9:actionButton}).toHaveAttribute('aria-label');",
      "  });",
      "",
      "  ${0}",
      "});"
    ],
    "description": "Teste React completo com acessibilidade"
  }
}