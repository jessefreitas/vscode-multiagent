{
  "SCPO Python FastAPI": {
    "prefix": "scpo-fastapi-endpoint",
    "body": [
      "from fastapi import APIRouter, Depends, HTTPException, status",
      "from fastapi.security import HTTPBearer",
      "from pydantic import BaseModel, Field",
      "from typing import List, Optional",
      "from sqlalchemy.orm import Session",
      "",
      "from ..database import get_db",
      "from ..models.${1:resource} import ${1/(.*)/${1:/capitalize}/}",
      "from ..services.${1:resource}_service import ${1/(.*)/${1:/capitalize}/}Service",
      "from ..schemas.${1:resource} import ${1/(.*)/${1:/capitalize}/}Create, ${1/(.*)/${1:/capitalize}/}Update, ${1/(.*)/${1:/capitalize}/}Response",
      "",
      "\"\"\"",
      "${1/(.*)/${1:/capitalize}/} Router - Generated with SCPO",
      "Task: ${2:CRUD endpoints para recurso}",
      "Constraints: FastAPI, Pydantic, SQLAlchemy, Error handling",
      "\"\"\"",
      "",
      "router = APIRouter(",
      "    prefix=\"/${3:${1:resource}s}\",",
      "    tags=[\"${3:${1:resource}s}\"],",
      "    dependencies=[Depends(HTTPBearer())]",
      ")",
      "",
      "",
      "class ${1/(.*)/${1:/capitalize}/}QueryParams(BaseModel):",
      "    page: int = Field(default=1, ge=1, description=\"Page number\")",
      "    per_page: int = Field(default=20, ge=1, le=100, description=\"Items per page\")",
      "    search: Optional[str] = Field(default=None, max_length=100, description=\"Search term\")",
      "    ${4:status}: Optional[str] = Field(default=None, description=\"Filter by status\")",
      "",
      "",
      "@router.get(\"/\", response_model=List[${1/(.*)/${1:/capitalize}/}Response])",
      "async def get_${3:${1:resource}s}(",
      "    params: ${1/(.*)/${1:/capitalize}/}QueryParams = Depends(),",
      "    db: Session = Depends(get_db)",
      "):",
      "    \"\"\"",
      "    Retrieve ${3:${1:resource}s} with pagination and filtering",
      "    \"\"\"",
      "    try:",
      "        ${5:service} = ${1/(.*)/${1:/capitalize}/}Service(db)",
      "        ${6:result} = await ${5:service}.get_all(",
      "            page=params.page,",
      "            per_page=params.per_page,",
      "            search=params.search,",
      "            ${4:status}=params.${4:status}",
      "        )",
      "        return ${6:result}",
      "        ",
      "    except Exception as e:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,",
      "            detail=f\"Error retrieving ${3:${1:resource}s}: {str(e)}\"",
      "        )",
      "",
      "",
      "@router.get(\"/{${7:${1:resource}_id}}\", response_model=${1/(.*)/${1:/capitalize}/}Response)",
      "async def get_${1:resource}(",
      "    ${7:${1:resource}_id}: int,",
      "    db: Session = Depends(get_db)",
      "):",
      "    \"\"\"",
      "    Retrieve a specific ${1:resource} by ID",
      "    \"\"\"",
      "    ${5:service} = ${1/(.*)/${1:/capitalize}/}Service(db)",
      "    ${1:resource} = await ${5:service}.get_by_id(${7:${1:resource}_id})",
      "    ",
      "    if not ${1:resource}:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=f\"${1/(.*)/${1:/capitalize}/} with ID {${7:${1:resource}_id}} not found\"",
      "        )",
      "    ",
      "    return ${1:resource}",
      "",
      "",
      "@router.post(\"/\", response_model=${1/(.*)/${1:/capitalize}/}Response, status_code=status.HTTP_201_CREATED)",
      "async def create_${1:resource}(",
      "    ${1:resource}_data: ${1/(.*)/${1:/capitalize}/}Create,",
      "    db: Session = Depends(get_db)",
      "):",
      "    \"\"\"",
      "    Create a new ${1:resource}",
      "    \"\"\"",
      "    try:",
      "        ${5:service} = ${1/(.*)/${1:/capitalize}/}Service(db)",
      "        ${8:new_${1:resource}} = await ${5:service}.create(${1:resource}_data)",
      "        return ${8:new_${1:resource}}",
      "        ",
      "    except ValueError as e:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_400_BAD_REQUEST,",
      "            detail=str(e)",
      "        )",
      "    except Exception as e:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,",
      "            detail=f\"Error creating ${1:resource}: {str(e)}\"",
      "        )",
      "",
      "",
      "@router.put(\"/{${7:${1:resource}_id}}\", response_model=${1/(.*)/${1:/capitalize}/}Response)",
      "async def update_${1:resource}(",
      "    ${7:${1:resource}_id}: int,",
      "    ${1:resource}_data: ${1/(.*)/${1:/capitalize}/}Update,",
      "    db: Session = Depends(get_db)",
      "):",
      "    \"\"\"",
      "    Update an existing ${1:resource}",
      "    \"\"\"",
      "    ${5:service} = ${1/(.*)/${1:/capitalize}/}Service(db)",
      "    ${9:updated_${1:resource}} = await ${5:service}.update(${7:${1:resource}_id}, ${1:resource}_data)",
      "    ",
      "    if not ${9:updated_${1:resource}}:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=f\"${1/(.*)/${1:/capitalize}/} with ID {${7:${1:resource}_id}} not found\"",
      "        )",
      "    ",
      "    return ${9:updated_${1:resource}}",
      "",
      "",
      "@router.delete(\"/{${7:${1:resource}_id}}\", status_code=status.HTTP_204_NO_CONTENT)",
      "async def delete_${1:resource}(",
      "    ${7:${1:resource}_id}: int,",
      "    db: Session = Depends(get_db)",
      "):",
      "    \"\"\"",
      "    Delete a ${1:resource}",
      "    \"\"\"",
      "    ${5:service} = ${1/(.*)/${1:/capitalize}/}Service(db)",
      "    ${10:deleted} = await ${5:service}.delete(${7:${1:resource}_id})",
      "    ",
      "    if not ${10:deleted}:",
      "        raise HTTPException(",
      "            status_code=status.HTTP_404_NOT_FOUND,",
      "            detail=f\"${1/(.*)/${1:/capitalize}/} with ID {${7:${1:resource}_id}} not found\"",
      "        )",
      "",
      "${0}"
    ],
    "description": "FastAPI router completo com CRUD operations"
  },

  "SCPO Python Model": {
    "prefix": "scpo-sqlalchemy-model",
    "body": [
      "from sqlalchemy import Column, Integer, String, DateTime, Text, Boolean, ForeignKey",
      "from sqlalchemy.orm import relationship",
      "from sqlalchemy.sql import func",
      "from ..database import Base",
      "",
      "\"\"\"",
      "${1:ModelName} Model - Generated with SCPO",
      "Task: ${2:Modelo SQLAlchemy para entidade}",
      "Constraints: SQLAlchemy ORM, Relationships, Timestamps",
      "\"\"\"",
      "",
      "",
      "class ${1:ModelName}(Base):",
      "    __tablename__ = \"${3:${1:model_name}s}\"",
      "",
      "    id = Column(Integer, primary_key=True, index=True)",
      "    ${4:title} = Column(String(${5:255}), nullable=False, index=True)",
      "    ${6:description} = Column(Text, nullable=True)",
      "    ${7:status} = Column(String(${8:50}), default=\"${9:active}\", nullable=False)",
      "    ${10:is_active} = Column(Boolean, default=True, nullable=False)",
      "    ",
      "    # Timestamps",
      "    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)",
      "    updated_at = Column(DateTime(timezone=True), onupdate=func.now(), nullable=True)",
      "    ",
      "    # Foreign Keys",
      "    ${11:user_id} = Column(Integer, ForeignKey(\"${12:users}.id\"), nullable=False)",
      "    ${13:category_id} = Column(Integer, ForeignKey(\"${14:categories}.id\"), nullable=True)",
      "    ",
      "    # Relationships",
      "    ${15:user} = relationship(\"${16:User}\", back_populates=\"${3:${1:model_name}s}\")",
      "    ${17:category} = relationship(\"${18:Category}\", back_populates=\"${3:${1:model_name}s}\")",
      "    ${19:items} = relationship(\"${20:Item}\", back_populates=\"${1:model_name}\", cascade=\"all, delete-orphan\")",
      "",
      "    def __repr__(self) -> str:",
      "        return f\"<${1:ModelName}(id={self.id}, ${4:title}='{self.${4:title}}')>\"",
      "    ",
      "    @property",
      "    def is_published(self) -> bool:",
      "        \"\"\"Check if ${1:model_name} is published\"\"\"",
      "        return self.${7:status} == \"${21:published}\" and self.${10:is_active}",
      "    ",
      "    def to_dict(self) -> dict:",
      "        \"\"\"Convert model to dictionary\"\"\"",
      "        return {",
      "            \"id\": self.id,",
      "            \"${4:title}\": self.${4:title},",
      "            \"${6:description}\": self.${6:description},",
      "            \"${7:status}\": self.${7:status},",
      "            \"${10:is_active}\": self.${10:is_active},",
      "            \"created_at\": self.created_at,",
      "            \"updated_at\": self.updated_at,",
      "            \"${11:user_id}\": self.${11:user_id},",
      "            \"${13:category_id}\": self.${13:category_id}",
      "        }",
      "",
      "${0}"
    ],
    "description": "Modelo SQLAlchemy com relacionamentos e m√©todos"
  },

  "SCPO Python Service": {
    "prefix": "scpo-python-service",
    "body": [
      "from typing import List, Optional, Dict, Any",
      "from sqlalchemy.orm import Session",
      "from sqlalchemy import and_, or_",
      "from ..models.${1:resource} import ${1/(.*)/${1:/capitalize}/}",
      "from ..schemas.${1:resource} import ${1/(.*)/${1:/capitalize}/}Create, ${1/(.*)/${1:/capitalize}/}Update",
      "",
      "\"\"\"",
      "${1/(.*)/${1:/capitalize}/}Service - Generated with SCPO",
      "Task: ${2:Business logic para gerenciar recurso}",
      "Constraints: Repository pattern, Error handling, Pagination",
      "\"\"\"",
      "",
      "",
      "class ${1/(.*)/${1:/capitalize}/}Service:",
      "    def __init__(self, db: Session):",
      "        self.db = db",
      "",
      "    async def get_all(",
      "        self,",
      "        page: int = 1,",
      "        per_page: int = 20,",
      "        search: Optional[str] = None,",
      "        ${3:status}: Optional[str] = None,",
      "        ${4:user_id}: Optional[int] = None",
      "    ) -> List[${1/(.*)/${1:/capitalize}/}]:",
      "        \"\"\"",
      "        Retrieve all ${1:resource}s with filtering and pagination",
      "        \"\"\"",
      "        query = self.db.query(${1/(.*)/${1:/capitalize}/})",
      "        ",
      "        # Apply filters",
      "        if search:",
      "            search_filter = f\"%{search}%\"",
      "            query = query.filter(",
      "                or_(",
      "                    ${1/(.*)/${1:/capitalize}/}.${5:title}.ilike(search_filter),",
      "                    ${1/(.*)/${1:/capitalize}/}.${6:description}.ilike(search_filter)",
      "                )",
      "            )",
      "        ",
      "        if ${3:status}:",
      "            query = query.filter(${1/(.*)/${1:/capitalize}/}.${3:status} == ${3:status})",
      "        ",
      "        if ${4:user_id}:",
      "            query = query.filter(${1/(.*)/${1:/capitalize}/}.${4:user_id} == ${4:user_id})",
      "        ",
      "        # Apply pagination",
      "        offset = (page - 1) * per_page",
      "        ${7:results} = query.offset(offset).limit(per_page).all()",
      "        ",
      "        return ${7:results}",
      "",
      "    async def get_by_id(self, ${8:${1:resource}_id}: int) -> Optional[${1/(.*)/${1:/capitalize}/}]:",
      "        \"\"\"",
      "        Retrieve a ${1:resource} by ID",
      "        \"\"\"",
      "        return self.db.query(${1/(.*)/${1:/capitalize}/}).filter(${1/(.*)/${1:/capitalize}/}.id == ${8:${1:resource}_id}).first()",
      "",
      "    async def create(self, ${1:resource}_data: ${1/(.*)/${1:/capitalize}/}Create) -> ${1/(.*)/${1:/capitalize}/}:",
      "        \"\"\"",
      "        Create a new ${1:resource}",
      "        \"\"\"",
      "        # Validation",
      "        await self._validate_create_data(${1:resource}_data)",
      "        ",
      "        ${9:db_${1:resource}} = ${1/(.*)/${1:/capitalize}/}(**${1:resource}_data.dict())",
      "        self.db.add(${9:db_${1:resource}})",
      "        ",
      "        try:",
      "            self.db.commit()",
      "            self.db.refresh(${9:db_${1:resource}})",
      "            return ${9:db_${1:resource}}",
      "        except Exception as e:",
      "            self.db.rollback()",
      "            raise ValueError(f\"Error creating ${1:resource}: {str(e)}\")",
      "",
      "    async def update(",
      "        self, ",
      "        ${8:${1:resource}_id}: int, ",
      "        ${1:resource}_data: ${1/(.*)/${1:/capitalize}/}Update",
      "    ) -> Optional[${1/(.*)/${1:/capitalize}/}]:",
      "        \"\"\"",
      "        Update an existing ${1:resource}",
      "        \"\"\"",
      "        ${9:db_${1:resource}} = await self.get_by_id(${8:${1:resource}_id})",
      "        if not ${9:db_${1:resource}}:",
      "            return None",
      "        ",
      "        # Validation",
      "        await self._validate_update_data(${9:db_${1:resource}}, ${1:resource}_data)",
      "        ",
      "        # Update fields",
      "        ${10:update_data} = ${1:resource}_data.dict(exclude_unset=True)",
      "        for field, value in ${10:update_data}.items():",
      "            setattr(${9:db_${1:resource}}, field, value)",
      "        ",
      "        try:",
      "            self.db.commit()",
      "            self.db.refresh(${9:db_${1:resource}})",
      "            return ${9:db_${1:resource}}",
      "        except Exception as e:",
      "            self.db.rollback()",
      "            raise ValueError(f\"Error updating ${1:resource}: {str(e)}\")",
      "",
      "    async def delete(self, ${8:${1:resource}_id}: int) -> bool:",
      "        \"\"\"",
      "        Delete a ${1:resource}",
      "        \"\"\"",
      "        ${9:db_${1:resource}} = await self.get_by_id(${8:${1:resource}_id})",
      "        if not ${9:db_${1:resource}}:",
      "            return False",
      "        ",
      "        try:",
      "            self.db.delete(${9:db_${1:resource}})",
      "            self.db.commit()",
      "            return True",
      "        except Exception as e:",
      "            self.db.rollback()",
      "            raise ValueError(f\"Error deleting ${1:resource}: {str(e)}\")",
      "",
      "    async def _validate_create_data(self, data: ${1/(.*)/${1:/capitalize}/}Create) -> None:",
      "        \"\"\"",
      "        Validate data before creating ${1:resource}",
      "        \"\"\"",
      "        # Check for duplicates",
      "        ${11:existing} = self.db.query(${1/(.*)/${1:/capitalize}/}).filter(",
      "            ${1/(.*)/${1:/capitalize}/}.${5:title} == data.${5:title}",
      "        ).first()",
      "        ",
      "        if ${11:existing}:",
      "            raise ValueError(f\"${1/(.*)/${1:/capitalize}/} with ${5:title} '{data.${5:title}}' already exists\")",
      "",
      "    async def _validate_update_data(",
      "        self, ",
      "        ${12:current}: ${1/(.*)/${1:/capitalize}/}, ",
      "        data: ${1/(.*)/${1:/capitalize}/}Update",
      "    ) -> None:",
      "        \"\"\"",
      "        Validate data before updating ${1:resource}",
      "        \"\"\"",
      "        # Check for duplicates if title is being updated",
      "        if hasattr(data, '${5:title}') and data.${5:title} and data.${5:title} != ${12:current}.${5:title}:",
      "            ${11:existing} = self.db.query(${1/(.*)/${1:/capitalize}/}).filter(",
      "                and_(",
      "                    ${1/(.*)/${1:/capitalize}/}.${5:title} == data.${5:title},",
      "                    ${1/(.*)/${1:/capitalize}/}.id != ${12:current}.id",
      "                )",
      "            ).first()",
      "            ",
      "            if ${11:existing}:",
      "                raise ValueError(f\"${1/(.*)/${1:/capitalize}/} with ${5:title} '{data.${5:title}}' already exists\")",
      "",
      "${0}"
    ],
    "description": "Service class Python com business logic completo"
  },

  "SCPO Python Test": {
    "prefix": "scpo-pytest-test",
    "body": [
      "import pytest",
      "from unittest.mock import Mock, AsyncMock, patch",
      "from sqlalchemy.orm import Session",
      "from fastapi.testclient import TestClient",
      "",
      "from ..services.${1:resource}_service import ${1/(.*)/${1:/capitalize}/}Service",
      "from ..models.${1:resource} import ${1/(.*)/${1:/capitalize}/}",
      "from ..schemas.${1:resource} import ${1/(.*)/${1:/capitalize}/}Create, ${1/(.*)/${1:/capitalize}/}Update",
      "",
      "\"\"\"",
      "${1/(.*)/${1:/capitalize}/}Service Tests - Generated with SCPO",
      "Task: ${2:Testar business logic do service}",
      "Constraints: Pytest, Mocks, Async testing, Edge cases",
      "\"\"\"",
      "",
      "",
      "@pytest.fixture",
      "def mock_db_session():",
      "    \"\"\"Mock database session\"\"\"",
      "    return Mock(spec=Session)",
      "",
      "",
      "@pytest.fixture",
      "def ${3:${1:resource}_service}(mock_db_session):",
      "    \"\"\"${1/(.*)/${1:/capitalize}/}Service instance with mocked DB\"\"\"",
      "    return ${1/(.*)/${1:/capitalize}/}Service(mock_db_session)",
      "",
      "",
      "@pytest.fixture",
      "def ${4:sample_${1:resource}}():",
      "    \"\"\"Sample ${1:resource} data\"\"\"",
      "    return ${1/(.*)/${1:/capitalize}/}(",
      "        id=1,",
      "        ${5:title}=\"Test ${1/(.*)/${1:/capitalize}/}\",",
      "        ${6:description}=\"Test description\",",
      "        ${7:status}=\"${8:active}\",",
      "        ${9:user_id}=1",
      "    )",
      "",
      "",
      "@pytest.fixture", 
      "def ${10:${1:resource}_create_data}():",
      "    \"\"\"Sample create data\"\"\"",
      "    return ${1/(.*)/${1:/capitalize}/}Create(",
      "        ${5:title}=\"New ${1/(.*)/${1:/capitalize}/}\",",
      "        ${6:description}=\"New description\",",
      "        ${9:user_id}=1",
      "    )",
      "",
      "",
      "class Test${1/(.*)/${1:/capitalize}/}Service:",
      "    \"\"\"Test suite for ${1/(.*)/${1:/capitalize}/}Service\"\"\"",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_get_all_returns_filtered_results(",
      "        self, ",
      "        ${3:${1:resource}_service}, ",
      "        ${4:sample_${1:resource}}",
      "    ):",
      "        \"\"\"Test get_all with filtering parameters\"\"\"",
      "        # Arrange",
      "        ${3:${1:resource}_service}.db.query.return_value.filter.return_value.offset.return_value.limit.return_value.all.return_value = [${4:sample_${1:resource}}]",
      "        ",
      "        # Act",
      "        ${11:result} = await ${3:${1:resource}_service}.get_all(",
      "            page=1,",
      "            per_page=10,",
      "            search=\"test\",",
      "            ${7:status}=\"${8:active}\"",
      "        )",
      "        ",
      "        # Assert",
      "        assert ${11:result} == [${4:sample_${1:resource}}]",
      "        ${3:${1:resource}_service}.db.query.assert_called_once_with(${1/(.*)/${1:/capitalize}/})",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_get_by_id_returns_existing_${1:resource}(",
      "        self,",
      "        ${3:${1:resource}_service},",
      "        ${4:sample_${1:resource}}",
      "    ):",
      "        \"\"\"Test get_by_id with valid ID\"\"\"",
      "        # Arrange",
      "        ${3:${1:resource}_service}.db.query.return_value.filter.return_value.first.return_value = ${4:sample_${1:resource}}",
      "        ",
      "        # Act",
      "        ${11:result} = await ${3:${1:resource}_service}.get_by_id(1)",
      "        ",
      "        # Assert",
      "        assert ${11:result} == ${4:sample_${1:resource}}",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_get_by_id_returns_none_for_invalid_id(",
      "        self,",
      "        ${3:${1:resource}_service}",
      "    ):",
      "        \"\"\"Test get_by_id with invalid ID\"\"\"",
      "        # Arrange",
      "        ${3:${1:resource}_service}.db.query.return_value.filter.return_value.first.return_value = None",
      "        ",
      "        # Act",
      "        ${11:result} = await ${3:${1:resource}_service}.get_by_id(999)",
      "        ",
      "        # Assert",
      "        assert ${11:result} is None",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_create_success(",
      "        self,",
      "        ${3:${1:resource}_service},",
      "        ${10:${1:resource}_create_data}",
      "    ):",
      "        \"\"\"Test successful ${1:resource} creation\"\"\"",
      "        # Arrange",
      "        ${12:mock_${1:resource}} = Mock(spec=${1/(.*)/${1:/capitalize}/})",
      "        ${3:${1:resource}_service}.db.add.return_value = None",
      "        ${3:${1:resource}_service}.db.commit.return_value = None",
      "        ${3:${1:resource}_service}.db.refresh.return_value = None",
      "        ",
      "        with patch('${13:app.services.${1:resource}_service}.${1/(.*)/${1:/capitalize}/}', return_value=${12:mock_${1:resource}}):",
      "            ${3:${1:resource}_service}._validate_create_data = AsyncMock()",
      "            ",
      "            # Act",
      "            ${11:result} = await ${3:${1:resource}_service}.create(${10:${1:resource}_create_data})",
      "        ",
      "        # Assert",
      "        assert ${11:result} == ${12:mock_${1:resource}}",
      "        ${3:${1:resource}_service}.db.add.assert_called_once()",
      "        ${3:${1:resource}_service}.db.commit.assert_called_once()",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_create_validation_error(",
      "        self,",
      "        ${3:${1:resource}_service},",
      "        ${10:${1:resource}_create_data}",
      "    ):",
      "        \"\"\"Test ${1:resource} creation with validation error\"\"\"",
      "        # Arrange",
      "        ${3:${1:resource}_service}._validate_create_data = AsyncMock(",
      "            side_effect=ValueError(\"Validation error\")",
      "        )",
      "        ",
      "        # Act & Assert",
      "        with pytest.raises(ValueError, match=\"Validation error\"):",
      "            await ${3:${1:resource}_service}.create(${10:${1:resource}_create_data})",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_update_success(",
      "        self,",
      "        ${3:${1:resource}_service},",
      "        ${4:sample_${1:resource}}",
      "    ):",
      "        \"\"\"Test successful ${1:resource} update\"\"\"",
      "        # Arrange",
      "        ${14:update_data} = ${1/(.*)/${1:/capitalize}/}Update(${5:title}=\"Updated Title\")",
      "        ${3:${1:resource}_service}.get_by_id = AsyncMock(return_value=${4:sample_${1:resource}})",
      "        ${3:${1:resource}_service}._validate_update_data = AsyncMock()",
      "        ",
      "        # Act",
      "        ${11:result} = await ${3:${1:resource}_service}.update(1, ${14:update_data})",
      "        ",
      "        # Assert",
      "        assert ${11:result} == ${4:sample_${1:resource}}",
      "        assert ${4:sample_${1:resource}}.${5:title} == \"Updated Title\"",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_delete_success(",
      "        self,",
      "        ${3:${1:resource}_service},",
      "        ${4:sample_${1:resource}}",
      "    ):",
      "        \"\"\"Test successful ${1:resource} deletion\"\"\"",
      "        # Arrange",
      "        ${3:${1:resource}_service}.get_by_id = AsyncMock(return_value=${4:sample_${1:resource}})",
      "        ",
      "        # Act",
      "        ${11:result} = await ${3:${1:resource}_service}.delete(1)",
      "        ",
      "        # Assert",
      "        assert ${11:result} is True",
      "        ${3:${1:resource}_service}.db.delete.assert_called_once_with(${4:sample_${1:resource}})",
      "        ${3:${1:resource}_service}.db.commit.assert_called_once()",
      "",
      "    ${0}",
      "",
      "",
      "@pytest.mark.integration",
      "class TestIntegration${1/(.*)/${1:/capitalize}/}Service:",
      "    \"\"\"Integration tests for ${1/(.*)/${1:/capitalize}/}Service\"\"\"",
      "",
      "    @pytest.mark.asyncio",
      "    async def test_full_crud_cycle(self, ${15:db_session}):",
      "        \"\"\"Test complete CRUD cycle\"\"\"",
      "        ${3:${1:resource}_service} = ${1/(.*)/${1:/capitalize}/}Service(${15:db_session})",
      "        ",
      "        # Create",
      "        ${16:create_data} = ${1/(.*)/${1:/capitalize}/}Create(",
      "            ${5:title}=\"Integration Test\",",
      "            ${6:description}=\"Integration test description\",",
      "            ${9:user_id}=1",
      "        )",
      "        ",
      "        ${17:created} = await ${3:${1:resource}_service}.create(${16:create_data})",
      "        assert ${17:created}.${5:title} == \"Integration Test\"",
      "        ",
      "        # Read",
      "        ${18:found} = await ${3:${1:resource}_service}.get_by_id(${17:created}.id)",
      "        assert ${18:found} is not None",
      "        assert ${18:found}.${5:title} == \"Integration Test\"",
      "        ",
      "        # Update",
      "        ${14:update_data} = ${1/(.*)/${1:/capitalize}/}Update(${5:title}=\"Updated Integration Test\")",
      "        ${19:updated} = await ${3:${1:resource}_service}.update(${17:created}.id, ${14:update_data})",
      "        assert ${19:updated}.${5:title} == \"Updated Integration Test\"",
      "        ",
      "        # Delete",
      "        ${20:deleted} = await ${3:${1:resource}_service}.delete(${17:created}.id)",
      "        assert ${20:deleted} is True",
      "        ",
      "        # Verify deletion",
      "        ${21:not_found} = await ${3:${1:resource}_service}.get_by_id(${17:created}.id)",
      "        assert ${21:not_found} is None"
    ],
    "description": "Testes Python completos com Pytest e mocks"
  }
}