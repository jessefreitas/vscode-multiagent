{
  "SCPO PHP Controller": {
    "prefix": "scpo-php-controller",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace App\\Controllers;",
      "",
      "use Psr\\Http\\Message\\ResponseInterface as Response;",
      "use Psr\\Http\\Message\\ServerRequestInterface as Request;",
      "",
      "/**",
      " * ${1:Resource}Controller - Generated with SCPO",
      " * Task: ${2:Implementar CRUD para resource}",
      " * Constraints: PSR-12, Performance < 200ms",
      " */",
      "class ${1:Resource}Controller",
      "{",
      "    public function __construct(",
      "        private ${1:Resource}Repository $repository",
      "    ) {}",
      "",
      "    public function index(Request $request, Response $response): Response",
      "    {",
      "        try {",
      "            $params = $request->getQueryParams();",
      "            $page = (int) ($params['page'] ?? 1);",
      "            $perPage = (int) ($params['per_page'] ?? 20);",
      "            ",
      "            $result = $this->repository->findPaginated($page, $perPage);",
      "            ",
      "            $data = [",
      "                'data' => $result['items'],", 
      "                'pagination' => [",
      "                    'page' => $page,",
      "                    'per_page' => $perPage,",
      "                    'total' => $result['total']",
      "                ]",
      "            ];",
      "            ",
      "            $response->getBody()->write(json_encode($data));",
      "            return $response->withHeader('Content-Type', 'application/json');",
      "            ",
      "        } catch (Exception $e) {",
      "            $error = ['error' => 'Internal server error'];",
      "            $response->getBody()->write(json_encode($error));",
      "            return $response->withStatus(500)->withHeader('Content-Type', 'application/json');",
      "        }",
      "    }",
      "",
      "    public function show(Request $request, Response $response, array $args): Response",
      "    {",
      "        ${3:// Implementar método show}",
      "        ${0}",
      "    }",
      "}"
    ],
    "description": "Controller PHP seguindo padrões SCPO"
  },

  "SCPO PHP Repository": {
    "prefix": "scpo-php-repository", 
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace App\\Repositories;",
      "",
      "use PDO;",
      "use PDOException;",
      "",
      "/**",
      " * ${1:Resource}Repository - Generated with SCPO",
      " * Constraints: Prepared statements, Error handling, Performance optimized",
      " */",
      "class ${1:Resource}Repository",
      "{",
      "    public function __construct(private PDO $pdo) {}",
      "",
      "    public function findPaginated(int $page = 1, int $perPage = 20): array",
      "    {",
      "        $offset = ($page - 1) * $perPage;",
      "        ",
      "        try {",
      "            // Count total records",
      "            $countSql = 'SELECT COUNT(*) FROM ${2:table_name} WHERE status = :status';",
      "            $countStmt = $this->pdo->prepare($countSql);",
      "            $countStmt->bindValue(':status', 1, PDO::PARAM_INT);",
      "            $countStmt->execute();",
      "            $total = (int) $countStmt->fetchColumn();",
      "            ",
      "            // Fetch paginated results", 
      "            $sql = '",
      "                SELECT ${3:id, name, created_at}",
      "                FROM ${2:table_name}", 
      "                WHERE status = :status",
      "                ORDER BY created_at DESC",
      "                LIMIT :limit OFFSET :offset",
      "            ';",
      "            ",
      "            $stmt = $this->pdo->prepare($sql);",
      "            $stmt->bindValue(':status', 1, PDO::PARAM_INT);",
      "            $stmt->bindValue(':limit', $perPage, PDO::PARAM_INT);", 
      "            $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);",
      "            $stmt->execute();",
      "            ",
      "            $items = $stmt->fetchAll(PDO::FETCH_ASSOC);",
      "            ",
      "            return [",
      "                'items' => $items,",
      "                'total' => $total",
      "            ];",
      "            ",
      "        } catch (PDOException $e) {",
      "            throw new RuntimeException('Database query failed: ' . $e->getMessage());",
      "        }",
      "    }",
      "",
      "    public function findById(int $id): ?array", 
      "    {",
      "        ${4:// Implementar findById}",
      "        ${0}",
      "    }",
      "}"
    ],
    "description": "Repository PHP com prepared statements"
  },

  "SCPO PHP Test": {
    "prefix": "scpo-php-test",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace Tests\\Unit\\Controllers;",
      "",
      "use PHPUnit\\Framework\\TestCase;",
      "use App\\Controllers\\${1:Resource}Controller;", 
      "use App\\Repositories\\${1:Resource}Repository;",
      "use Psr\\Http\\Message\\ResponseInterface;",
      "use Psr\\Http\\Message\\ServerRequestInterface;",
      "",
      "/**",
      " * ${1:Resource}ControllerTest - Generated with SCPO",
      " * Covers: CRUD operations, error handling, pagination",
      " */",
      "class ${1:Resource}ControllerTest extends TestCase",
      "{",
      "    private ${1:Resource}Controller $controller;",
      "    private ${1:Resource}Repository $repository;",
      "    private ServerRequestInterface $request;",
      "    private ResponseInterface $response;",
      "",
      "    protected function setUp(): void",
      "    {",
      "        $this->repository = $this->createMock(${1:Resource}Repository::class);",
      "        $this->controller = new ${1:Resource}Controller($this->repository);",
      "        $this->request = $this->createMock(ServerRequestInterface::class);",
      "        $this->response = $this->createMock(ResponseInterface::class);",
      "    }",
      "",
      "    public function testIndexReturnsSuccessfulResponse(): void",
      "    {",
      "        // Arrange",
      "        $mockData = [",
      "            'items' => [['id' => 1, 'name' => 'Test']],",
      "            'total' => 1",
      "        ];",
      "        ",
      "        $this->request->expects($this->once())",
      "            ->method('getQueryParams')",
      "            ->willReturn(['page' => '1', 'per_page' => '20']);",
      "            ",
      "        $this->repository->expects($this->once())",
      "            ->method('findPaginated')",
      "            ->with(1, 20)",
      "            ->willReturn($mockData);",
      "        ",
      "        // Act",
      "        $result = $this->controller->index($this->request, $this->response);",
      "        ",
      "        // Assert",
      "        $this->assertInstanceOf(ResponseInterface::class, $result);",
      "        ${0}",
      "    }",
      "",
      "    public function testIndexHandlesRepositoryException(): void",
      "    {",
      "        // Arrange",
      "        $this->request->expects($this->once())",
      "            ->method('getQueryParams')",
      "            ->willReturn([]);",
      "            ",
      "        $this->repository->expects($this->once())",
      "            ->method('findPaginated')",
      "            ->willThrowException(new \\RuntimeException('Database error'));",
      "        ",
      "        // Act & Assert", 
      "        $result = $this->controller->index($this->request, $this->response);",
      "        $this->assertInstanceOf(ResponseInterface::class, $result);",
      "    }",
      "}"
    ],
    "description": "Teste PHPUnit com mocks e assertions"
  },

  "SCPO PHP Middleware": {
    "prefix": "scpo-php-middleware",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace App\\Middleware;",
      "",
      "use Psr\\Http\\Message\\ResponseInterface as Response;",
      "use Psr\\Http\\Message\\ServerRequestInterface as Request;",
      "use Psr\\Http\\Server\\MiddlewareInterface;",
      "use Psr\\Http\\Server\\RequestHandlerInterface;",
      "",
      "/**",
      " * ${1:Auth}Middleware - Generated with SCPO", 
      " * Task: ${2:Validar autenticação JWT}",
      " * Constraints: Security-first, Performance optimized",
      " */",
      "class ${1:Auth}Middleware implements MiddlewareInterface",
      "{", 
      "    public function process(Request $request, RequestHandlerInterface $handler): Response",
      "    {",
      "        try {",
      "            // Extract token from header",
      "            $authHeader = $request->getHeaderLine('Authorization');",
      "            ",
      "            if (empty($authHeader) || !str_starts_with($authHeader, 'Bearer ')) {",
      "                return $this->createUnauthorizedResponse();",
      "            }",
      "            ",
      "            $token = substr($authHeader, 7);",
      "            ",
      "            // Validate token",
      "            if (!$this->validateToken($token)) {",
      "                return $this->createUnauthorizedResponse();",
      "            }",
      "            ",
      "            // Add user info to request attributes",
      "            $user = $this->getUserFromToken($token);",
      "            $request = $request->withAttribute('user', $user);",
      "            ",
      "            return $handler->handle($request);",
      "            ",
      "        } catch (\\Exception $e) {",
      "            return $this->createErrorResponse($e->getMessage());",
      "        }",
      "    }",
      "",
      "    private function validateToken(string $token): bool",
      "    {",
      "        ${3:// Implementar validação JWT}",
      "        return true;",
      "    }",
      "",
      "    private function getUserFromToken(string $token): array",
      "    {",
      "        ${4:// Extrair dados do usuário do token}",
      "        return ['id' => 1, 'email' => 'user@example.com'];",
      "    }",
      "",
      "    private function createUnauthorizedResponse(): Response",
      "    {",
      "        ${5:// Criar response 401}",
      "        ${0}",
      "    }",
      "}"
    ],
    "description": "Middleware PHP com validação e error handling"
  }
}