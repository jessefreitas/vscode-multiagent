{
  "SCPO Product Vision": {
    "prefix": "scpo-product-vision",
    "body": [
      "**ROLE:** Senior Product Strategist",
      "**TASK:** Define clear product vision for ${1:app_type}",
      "**CONSTRAINTS:** Solo dev/small team, realistic scope, measurable outcomes",
      "",
      "**OUTPUT FORMAT:**",
      "1. **VALUE PROPOSITION:** ${2:One sentence describing unique value}",
      "",
      "2. **USER PAINS:** 3 core problems this solves",
      "   - ${3:Pain point 1}",
      "   - ${4:Pain point 2}", 
      "   - ${5:Pain point 3}",
      "",
      "3. **FEATURE ROADMAP:**",
      "   **MVP (3 essential features):**",
      "   - ${6:Core feature 1}",
      "   - ${7:Core feature 2}",
      "   - ${8:Core feature 3}",
      "   ",
      "   **V2 (2 advanced features):**",
      "   - ${9:Advanced feature 1}",
      "   - ${10:Advanced feature 2}",
      "",
      "4. **SUCCESS METRICS:**",
      "   **Launch:** ${11:Launch metric 1}, ${12:Launch metric 2}",
      "   **Growth:** ${13:Growth metric 1}, ${14:Growth metric 2}",
      "",
      "**OPTIMIZATION:** Focus on validation over perfection. Prioritize user feedback loops.",
      "${0}"
    ],
    "description": "Define product vision with MVP scope and success metrics"
  },

  "SCPO Database Schema": {
    "prefix": "scpo-database-schema", 
    "body": [
      "**ROLE:** Backend Architect",
      "**TASK:** Design normalized relational schema for ${1:app_type}",
      "**CONSTRAINTS:** 3-5 tables, optimized for performance and scaling",
      "",
      "**SCHEMA OUTPUT:**",
      "",
      "## Table: ${2:table_name}",
      "| Field | Type | Constraints | Relationships |",
      "|-------|------|-------------|---------------|",
      "| id | UUID | PRIMARY KEY | - |",
      "| ${3:field1} | ${4:VARCHAR(255)} | ${5:NOT NULL} | - |",
      "| ${6:field2} | ${7:TEXT} | ${8:NULLABLE} | - |",
      "| ${9:foreign_key} | UUID | NOT NULL | FK to ${10:related_table}.id |",
      "| created_at | TIMESTAMP | NOT NULL DEFAULT NOW() | - |",
      "| updated_at | TIMESTAMP | NULLABLE | - |",
      "",
      "## Table: ${11:second_table}",
      "| Field | Type | Constraints | Relationships |", 
      "|-------|------|-------------|---------------|",
      "| id | UUID | PRIMARY KEY | - |",
      "| ${12:field1} | ${13:type} | ${14:constraints} | - |",
      "",
      "## Relationships",
      "- ${2:table_name} → ${11:second_table}: ${15:one-to-many} (${9:foreign_key})",
      "",
      "## Indexes",
      "- ${2:table_name}.${3:field1}: B-tree for ${16:search_queries}",
      "- ${2:table_name}.(${3:field1}, ${6:field2}): Composite for ${17:filter_queries}",
      "",
      "**OPTIMIZATION:** Focus on query patterns, not theoretical perfection",
      "${0}"
    ],
    "description": "Design normalized database schema with relationships and indexes"
  },

  "SCPO UI Design System": {
    "prefix": "scpo-ui-design-system",
    "body": [
      "**ROLE:** Expert UI Designer",
      "**TASK:** Create design system for ${1:app_type}",
      "**CONSTRAINTS:** Mobile-first, accessibility compliant, brand consistent",
      "",
      "**DESIGN SYSTEM:**",
      "",
      "## Color Palette",
      "### Primary Colors",
      "- Primary: #${2:2563eb} - Main brand color for CTAs",
      "- Primary-light: #${3:3b82f6} - Hover states",
      "- Primary-dark: #${4:1d4ed8} - Active states",
      "",
      "### Secondary Colors",
      "- Secondary: #${5:64748b} - Supporting elements", 
      "- Accent: #${6:06b6d4} - Highlights and notifications",
      "- Neutral: #${7:f1f5f9} to #${8:0f172a} - Text and backgrounds",
      "",
      "### Semantic Colors",
      "- Success: #${9:10b981} - Positive actions",
      "- Warning: #${10:f59e0b} - Caution states",
      "- Error: #${11:ef4444} - Error states",
      "- Info: #${12:3b82f6} - Informational",
      "",
      "## Typography Scale",
      "- **Heading 1:** ${13:2.5rem/700} - Page titles",
      "- **Heading 2:** ${14:2rem/600} - Section headers",  
      "- **Heading 3:** ${15:1.5rem/600} - Subsections",
      "- **Body:** ${16:1rem/400} - Main text",
      "- **Small:** ${17:0.875rem/400} - Captions, labels",
      "",
      "## Spacing System",
      "- Base unit: ${18:4px}",
      "- Scale: ${18:4}, ${19:8}, ${20:12}, ${21:16}, ${22:24}, ${23:32}, ${24:48}, ${25:64}px",
      "",
      "## Component Specs",
      "### Buttons",
      "- Primary: Solid background, white text",
      "- Secondary: Outline style, brand color border",
      "- Sizes: Small (${26:32px}), Medium (${27:40px}), Large (${28:48px})",
      "",
      "### Form Controls", 
      "- Border radius: ${29:6px}",
      "- Focus ring: ${30:2px} ${2:primary} with opacity",
      "- Error state: ${11:error} border + message",
      "",
      "**ACCESSIBILITY:** WCAG AA contrast ratios (4.5:1 minimum)",
      "${0}"
    ],
    "description": "Complete design system with colors, typography, and components"
  },

  "SCPO Performance Analysis": {
    "prefix": "scpo-performance-analysis",
    "body": [
      "**ROLE:** Performance Engineer", 
      "**TASK:** Profile ${1:component_name} for bottlenecks",
      "**CONSTRAINTS:** Real-world scenarios, measurable improvements, maintainable solutions",
      "",
      "**PROFILING ANALYSIS:**",
      "",
      "## Current Performance Baseline",
      "- **Execution time:** ${2:benchmark_results}",
      "- **Memory usage:** ${3:memory_footprint}",
      "- **CPU utilization:** ${4:processor_load}",
      "- **I/O operations:** ${5:database_network_calls}",
      "",
      "## Bottleneck Identification",
      "### Primary Bottleneck: ${6:issue_name}",
      "- **Location:** ${7:file_line_or_function}",
      "- **Impact:** ${8:performance_cost}",
      "- **Frequency:** ${9:execution_frequency}",
      "- **Root cause:** ${10:technical_explanation}",
      "",
      "## Optimization Options",
      "",
      "### Option A: ${11:optimization_name}",
      "**Implementation:**",
      "- Technical approach: ${12:specific_changes}",
      "- Code complexity: ${13|LOW,MEDIUM,HIGH|}",
      "- Development time: ${14:estimate}",
      "",
      "**Trade-offs:**",
      "- Performance gain: ${15:quantified_improvement}",
      "- Maintenance burden: ${16:ongoing_complexity}",
      "- Memory impact: ${17|increase,decrease,neutral|}",
      "- Risk level: ${18|LOW,MEDIUM,HIGH|}",
      "",
      "### Option B: ${19:alternative_approach}",
      "**Implementation:**",
      "- Technical approach: ${20:specific_changes}",
      "- Code complexity: ${21|LOW,MEDIUM,HIGH|}",
      "- Development time: ${22:estimate}",
      "",
      "**Trade-offs:**",
      "- Performance gain: ${23:quantified_improvement}",
      "- Maintenance burden: ${24:ongoing_complexity}",
      "- Memory impact: ${25|increase,decrease,neutral|}",
      "- Risk level: ${26|LOW,MEDIUM,HIGH|}",
      "",
      "**RECOMMENDATION:** ${27|Option A,Option B|} because ${28:reasoning_based_on_context}",
      "",
      "**MONITORING:** Key metrics to track post-optimization:",
      "- ${29:metric_1}",
      "- ${30:metric_2}",
      "${0}"
    ],
    "description": "Complete performance analysis with optimization options and trade-offs"
  },

  "SCPO Test Suite Generation": {
    "prefix": "scpo-test-suite",
    "body": [
      "**ROLE:** Senior Test Engineer",
      "**TASK:** Generate comprehensive test suite for ${1:component_name}",
      "**CONSTRAINTS:** Edge cases covered, maintainable tests, clear documentation",
      "",
      "**TEST SUITE STRUCTURE:**",
      "",
      "## Unit Tests",
      "",
      "### Happy Path Tests",
      "```${2:javascript}",
      "describe('${1:component_name} - Happy Path', () => {",
      "  test('should ${3:expected_behavior} when ${4:condition}', () => {",
      "    // Arrange",
      "    const ${5:input} = ${6:valid_input};",
      "    ",
      "    // Act",
      "    const result = ${7:function_call}(${5:input});",
      "    ",
      "    // Assert", 
      "    expect(result).toBe(${8:expected_output});",
      "  });",
      "});",
      "```",
      "",
      "### Edge Cases",
      "```${2:javascript}",
      "describe('${1:component_name} - Edge Cases', () => {",
      "  test('should handle empty input gracefully', () => {",
      "    const result = ${7:function_call}();",
      "    expect(result).toBe(${9:default_behavior});",
      "  });",
      "  ",
      "  test('should handle maximum boundary values', () => {",
      "    const result = ${7:function_call}(${10:max_value});",
      "    expect(result).toBe(${11:expected_max_behavior});",
      "  });",
      "  ",
      "  test('should handle minimum boundary values', () => {",
      "    const result = ${7:function_call}(${12:min_value});",
      "    expect(result).toBe(${13:expected_min_behavior});",
      "  });",
      "});",
      "```",
      "",
      "### Error Conditions",
      "```${2:javascript}",
      "describe('${1:component_name} - Error Handling', () => {",
      "  test('should throw ${14:error_type} when ${15:invalid_condition}', () => {",
      "    expect(() => {",
      "      ${7:function_call}(${16:invalid_input});",
      "    }).toThrow(${17:error_message});",
      "  });",
      "});",
      "```",
      "",
      "## Integration Tests",
      "```${2:javascript}",
      "describe('${1:component_name} Integration', () => {",
      "  test('should integrate with ${18:external_component}', async () => {",
      "    // Setup integration test",
      "    const ${19:mock_dependency} = ${20:mock_setup};",
      "    ",
      "    // Test integration",
      "    const result = await ${21:integration_call}();",
      "    ",
      "    expect(result).toMatchObject(${22:expected_shape});",
      "  });",
      "});",
      "```", 
      "",
      "**TEST COVERAGE TARGET:** 90%+ for critical paths, 80%+ overall",
      "**PERFORMANCE TESTS:** Include load/stress tests for bottleneck areas",
      "${0}"
    ],
    "description": "Complete test suite with unit tests, integration tests, and edge cases"
  },

  "SCPO Complete README": {
    "prefix": "scpo-complete-readme",
    "body": [
      "# 🚀 ${1:PROJECT_NAME}",
      "",
      "> ${2:One-line description of what this project does and why it matters}",
      "",
      "## ✨ Features",
      "",
      "- 🎯 **${3:Core Feature 1}** - ${4:Brief benefit description}",
      "- ⚡ **${5:Core Feature 2}** - ${6:Brief benefit description}",
      "- 🛡️ **${7:Core Feature 3}** - ${8:Brief benefit description}",
      "",
      "## 🏃 Quick Start",
      "",
      "### Prerequisites",
      "```bash",
      "# Required tools and versions",
      "${9:Node.js} >= ${10:18.0.0}",
      "${11:npm} >= ${12:8.0.0}",
      "${13:Database} >= ${14:version}",
      "```",
      "",
      "### Installation",
      "```bash",
      "# Clone and setup",
      "git clone ${15:repo_url}",
      "cd ${1:project_name}",
      "${16:npm install}",
      "",
      "# Environment setup",
      "cp .env.example .env",
      "# Edit .env with your settings",
      "```",
      "",
      "### Run Development Server",
      "```bash",
      "${17:npm run dev}",
      "# Open http://localhost:${18:3000}",
      "```",
      "",
      "## 🔧 Configuration",
      "",
      "### Environment Variables",
      "| Variable | Description | Default | Required |",
      "|----------|-------------|---------|----------|",
      "| `${19:DATABASE_URL}` | ${20:Database connection string} | - | ✅ |",
      "| `${21:API_KEY}` | ${22:External API key} | - | ✅ |",
      "| `${23:PORT}` | ${24:Server port} | ${18:3000} | ❌ |",
      "",
      "## 📖 Usage",
      "",
      "### Basic Example",
      "```${25:javascript}",
      "const ${26:MainClass} = require('${1:project_name}');",
      "",
      "// Initialize",
      "const app = new ${26:MainClass}({",
      "  apiKey: 'your-api-key',",
      "  environment: 'production'",
      "});",
      "",
      "// Use core functionality", 
      "const result = await app.${27:mainMethod}(${28:parameters});",
      "console.log(result);",
      "```",
      "",
      "## 🛠️ Development",
      "",
      "### Available Scripts",
      "```bash",
      "${29:npm run dev}          # Start development server",
      "${30:npm run build}        # Build for production",
      "${31:npm run test}         # Run test suite",
      "${32:npm run lint}         # Lint code",
      "```",
      "",
      "## 🚀 Deployment",
      "",
      "### Production Build",
      "```bash",
      "# Build optimized version",
      "${33:npm run build}",
      "",
      "# Start production server",
      "${34:npm start}",
      "```",
      "",
      "### Docker Deployment",
      "```bash",
      "# Build Docker image",
      "docker build -t ${1:project_name} .",
      "",
      "# Run container",
      "docker run -p ${35:port}:${18:3000} ${1:project_name}",
      "```",
      "",
      "## 🤝 Contributing",
      "",
      "1. Fork the repository",
      "2. Create feature branch (`git checkout -b feature/amazing-feature`)",
      "3. Commit changes (`git commit -m 'Add amazing feature'`)",
      "4. Push to branch (`git push origin feature/amazing-feature`)",
      "5. Open Pull Request",
      "",
      "## 📄 License",
      "",
      "MIT License - see [LICENSE](LICENSE) file for details.",
      "",
      "## 🙋 Support",
      "",
      "- 📧 Email: ${36:contact_email}",
      "- 🐛 Issues: ${37:github_issues_url}",
      "- 💬 Discussions: ${38:community_forum}",
      "",
      "---",
      "",
      "*Built with ❤️ by ${39:author_name}*",
      "${0}"
    ],
    "description": "Complete README with installation, usage, and deployment instructions"
  },

  "SCPO HTML CSS Starter": {
    "prefix": "scpo-html-starter",
    "body": [
      "**ROLE:** Frontend Developer",
      "**TASK:** Generate clean, responsive HTML + CSS starter with no dependencies",
      "**CONSTRAINTS:** Mobile-first, minimal design, semantic HTML, modern CSS",
      "",
      "**PROJECT:** ${1:project_name}",
      "**THEME:** ${2:theme_description}",
      "**PRIMARY COLOR:** #${3:2563eb}",
      "**SECONDARY COLOR:** #${4:64748b}",
      "",
      "**HTML STRUCTURE:**",
      "- Header with navigation",
      "- Hero section with CTA",
      "- About section", 
      "- Contact form",
      "- Footer",
      "",
      "**CSS FEATURES:**",
      "- CSS custom properties for theming",
      "- Mobile-first responsive design",
      "- Flexbox/Grid layouts",
      "- Smooth animations and transitions",
      "- WCAG AA accessibility compliance",
      "",
      "**RESPONSIVE BREAKPOINTS:**",
      "- Mobile: 320px - 767px",
      "- Tablet: 768px - 1023px", 
      "- Desktop: 1024px+",
      "",
      "**COMPONENTS NEEDED:**",
      "- Navigation (desktop + mobile)",
      "- Buttons (primary, secondary)",
      "- Form controls (input, textarea, validation)",
      "- Cards/sections",
      "- Typography scale",
      "",
      "**ACCESSIBILITY REQUIREMENTS:**",
      "- Semantic HTML5 elements",
      "- ARIA labels where needed",
      "- Keyboard navigation support",
      "- Screen reader compatibility",
      "- Focus indicators",
      "- Color contrast compliance",
      "",
      "**PERFORMANCE OPTIMIZATIONS:**",
      "- Minimal CSS (no frameworks)",
      "- Optimized images (WebP with fallbacks)",
      "- Critical CSS inlined",
      "- Progressive enhancement",
      "",
      "Please generate complete HTML and CSS code for a professional, production-ready website.",
      "${0}"
    ],
    "description": "Generate complete HTML/CSS starter with responsive design and accessibility"
  }
}