#!/usr/bin/env pwsh
# üöÄ INICIALIZADOR AUTOM√ÅTICO - Configura projeto ap√≥s clone
# ========================================================
# Este script √© executado automaticamente para configurar tudo

Write-Host ""
Write-Host "üöÄ CONFIGURANDO PROJETO MULTIAGENT" -ForegroundColor Green
Write-Host "==================================" -ForegroundColor Green
Write-Host ""

# Detectar se estamos no diret√≥rio correto
$projetoJson = "projeto.json"
$multiagentJson = "multiagent.json"

if ((Test-Path $projetoJson) -or (Test-Path $multiagentJson)) {
  Write-Host "‚úÖ Projeto MultiAgent detectado!" -ForegroundColor Green
}
else {
  Write-Host "‚ö†Ô∏è  Criando configura√ß√£o b√°sica..." -ForegroundColor Yellow
  
  # Criar projeto.json b√°sico
  @"
{
  "projeto": {
    "nome": "$(Split-Path (Get-Location) -Leaf)",
    "descricao": "Projeto MultiAgent",
    "criado": "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
    "agente": "principal-v2",
    "modo": "automatico"
  },
  "configuracoes": {
    "autoExecutar": true,
    "autoCorrigir": true,
    "validacaoTempo": true
  }
}
"@ | Set-Content $projetoJson
  
  Write-Host "  ‚úÖ projeto.json criado" -ForegroundColor Gray
}

# Verificar e corrigir prompts
Write-Host "üîß Verificando prompts SCPO..." -ForegroundColor Yellow

if (Test-Path ".\corrigir-prompts.ps1") {
  & ".\corrigir-prompts.ps1" "." 2>$null
}
else {
  Write-Host "  ‚ö†Ô∏è  Script de corre√ß√£o n√£o encontrado, copiando manualmente..." -ForegroundColor Yellow
  
  # Verificar se pasta prompts existe
  if (-not (Test-Path "prompts")) {
    New-Item -ItemType Directory -Path "prompts" -Force | Out-Null
    Write-Host "  üìÅ Pasta prompts criada" -ForegroundColor Gray
  }
  
  # Contar prompts existentes
  $promptsExistentes = @()
  if (Test-Path "prompts") {
    $promptsExistentes = Get-ChildItem "prompts" -Filter "*.md"
  }
  
  Write-Host "  üìä $($promptsExistentes.Count) prompts encontrados" -ForegroundColor Cyan
}

# Verificar scripts essenciais
Write-Host "üîß Verificando scripts essenciais..." -ForegroundColor Yellow
$scriptsEssenciais = @(
  "ma.ps1",
  "anti-erros.ps1", 
  "validacao-tempo-real.ps1",
  "gerar-codigo-seguro.ps1",
  "sistema-anti-erros.ps1"
)

$scriptsEncontrados = 0
foreach ($script in $scriptsEssenciais) {
  if (Test-Path $script) {
    Write-Host "  ‚úÖ $script" -ForegroundColor Green
    $scriptsEncontrados++
  }
  else {
    Write-Host "  ‚ùå $script (faltando)" -ForegroundColor Red
  }
}

# Verificar configura√ß√µes
Write-Host "üîß Verificando configura√ß√µes..." -ForegroundColor Yellow
if (Test-Path "settings") {
  Write-Host "  ‚úÖ Configura√ß√µes encontradas" -ForegroundColor Green
}
else {
  Write-Host "  ‚ö†Ô∏è  Criando configura√ß√µes b√°sicas..." -ForegroundColor Yellow
  New-Item -ItemType Directory -Path "settings" -Force | Out-Null
  
  @"
{
  "multiagent": {
    "modo": "automatico",
    "correcaoAutomatica": true,
    "validacaoTempo": true,
    "modoLeigo": true
  },
  "agentes": {
    "principal": {
      "ativo": true,
      "autoExecucao": true
    }
  }
}
"@ | Set-Content "settings\global-settings.json"
  
  Write-Host "  ‚úÖ Configura√ß√µes b√°sicas criadas" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üìä RELAT√ìRIO DE INICIALIZA√á√ÉO" -ForegroundColor Cyan
Write-Host "============================" -ForegroundColor Cyan
Write-Host "  üîß Scripts: $scriptsEncontrados/$($scriptsEssenciais.Count)" -ForegroundColor White
Write-Host "  üìÑ Prompts: $((Get-ChildItem 'prompts' -Filter '*.md' -ErrorAction SilentlyContinue).Count) dispon√≠veis" -ForegroundColor White
Write-Host "  ‚öôÔ∏è  Configura√ß√µes: $(if (Test-Path 'settings') { '‚úÖ' } else { '‚ùå' })" -ForegroundColor White
Write-Host ""

if ($scriptsEncontrados -eq $scriptsEssenciais.Count) {
  Write-Host "üéâ PROJETO TOTALMENTE CONFIGURADO!" -ForegroundColor Green
  Write-Host ""
  Write-Host "üí° Comandos dispon√≠veis:" -ForegroundColor Cyan
  Write-Host "  .\ma.ps1 check          - Verificar sistema" -ForegroundColor Gray
  Write-Host "  .\gerar-codigo-seguro.ps1 - Gerar c√≥digo" -ForegroundColor Gray
  Write-Host "  .\reparar-projeto.ps1   - Reparar se necess√°rio" -ForegroundColor Gray
}
else {
  Write-Host "‚ö†Ô∏è  CONFIGURA√á√ÉO INCOMPLETA" -ForegroundColor Yellow
  Write-Host ""
  Write-Host "üí° Para reparar, execute:" -ForegroundColor Cyan
  Write-Host "  .\reparar-projeto.ps1" -ForegroundColor Gray
}

Write-Host ""